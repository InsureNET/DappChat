{"ast":null,"code":"var _jsxFileName = \"/Users/AlexMok/drizzletest/Twittor/App/src/UserPage.js\";\nimport React from 'react';\nimport { Statistic } from 'semantic-ui-react';\nexport default class UserPage extends React.Component {\n  constructor(props, context) {\n    super(props);\n\n    this.fetchNumberOfTweets = async address => {\n      const numTweets = await this.props.drizzle.contracts.Twittor.methods.getNumTweets(address).call();\n      this.setState({\n        numTweets: numTweets\n      });\n    };\n\n    this.populateData = () => {\n      return [{\n        key: 'numTweets',\n        label: 'Tweets',\n        value: \"\".concat(this.state.numTweets)\n      }, {\n        key: 'numReplies',\n        label: 'Replies',\n        value: \"\".concat(this.state.numReplies)\n      }, {\n        key: 'following',\n        label: 'Following',\n        value: \"\".concat(this.state.following)\n      }, {\n        key: 'followers',\n        label: 'Followers',\n        value: \"\".concat(this.state.followers)\n      }];\n    };\n\n    this.drizzleState = context.drizzle;\n    this.state = {\n      userAddress: '',\n      numTweets: 0,\n      numReplies: 0,\n      following: 0,\n      followers: 0\n    };\n  }\n\n  async componentDidMount() {\n    const drizzle = this.props.drizzle;\n    const accounts = await this.props.drizzle.web3.eth.getAccounts();\n    await this.fetchNumberOfTweets(accounts[0]);\n    const batch = [];\n    console.log(this.state.numTweets);\n\n    for (let i = 0; i < this.state.numTweets; i++) {\n      batch.push(drizzle.contracts.Twittor.methods.getNumReplies(accounts[0], i).call());\n    }\n\n    const numReplies = Promise.all(batch);\n    console.log(numReplies, 'NUM REPLIES');\n    console.log(drizzle, 'dizzle'); // drizzle.contracts.Twittor.methods.getNumTweets.cacheCall(accounts[0]);\n    // drizzle.contracts.Twittor.methods.getNumTweets.cacheCall(accounts[0]);\n\n    this.setState({\n      userAddress: accounts[0]\n    });\n  }\n\n  render() {\n    const items = [{\n      key: 'faves',\n      label: 'Faves',\n      value: '22'\n    }, {\n      key: 'views',\n      label: 'Views',\n      value: '31,200'\n    }, {\n      key: 'members',\n      label: 'Members',\n      value: '22'\n    }];\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"User Page\"), React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(Statistic.Group, {\n      items: this.populateData(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/AlexMok/drizzletest/Twittor/App/src/UserPage.js"],"names":["React","Statistic","UserPage","Component","constructor","props","context","fetchNumberOfTweets","address","numTweets","drizzle","contracts","Twittor","methods","getNumTweets","call","setState","populateData","key","label","value","state","numReplies","following","followers","drizzleState","userAddress","componentDidMount","accounts","web3","eth","getAccounts","batch","console","log","i","push","getNumReplies","Promise","all","render","items","display","justifyContent"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,mBAA1B;AAEA,eAAe,MAAMC,QAAN,SAAuBF,KAAK,CAACG,SAA7B,CAAuC;AACpDC,EAAAA,WAAW,CAACC,KAAD,EAAQC,OAAR,EAAiB;AAC1B,UAAMD,KAAN;;AAD0B,SAY5BE,mBAZ4B,GAYN,MAAMC,OAAN,IAAiB;AACrC,YAAMC,SAAS,GAAG,MAAM,KAAKJ,KAAL,CAAWK,OAAX,CAAmBC,SAAnB,CAA6BC,OAA7B,CAAqCC,OAArC,CACrBC,YADqB,CACRN,OADQ,EAErBO,IAFqB,EAAxB;AAGA,WAAKC,QAAL,CAAc;AAAEP,QAAAA,SAAS,EAAEA;AAAb,OAAd;AACD,KAjB2B;;AAAA,SA2C5BQ,YA3C4B,GA2Cb,MAAM;AACnB,aAAO,CACL;AAAEC,QAAAA,GAAG,EAAE,WAAP;AAAoBC,QAAAA,KAAK,EAAE,QAA3B;AAAqCC,QAAAA,KAAK,YAAK,KAAKC,KAAL,CAAWZ,SAAhB;AAA1C,OADK,EAEL;AACES,QAAAA,GAAG,EAAE,YADP;AAEEC,QAAAA,KAAK,EAAE,SAFT;AAGEC,QAAAA,KAAK,YAAK,KAAKC,KAAL,CAAWC,UAAhB;AAHP,OAFK,EAOL;AACEJ,QAAAA,GAAG,EAAE,WADP;AAEEC,QAAAA,KAAK,EAAE,WAFT;AAGEC,QAAAA,KAAK,YAAK,KAAKC,KAAL,CAAWE,SAAhB;AAHP,OAPK,EAYL;AACEL,QAAAA,GAAG,EAAE,WADP;AAEEC,QAAAA,KAAK,EAAE,WAFT;AAGEC,QAAAA,KAAK,YAAK,KAAKC,KAAL,CAAWG,SAAhB;AAHP,OAZK,CAAP;AAkBD,KA9D2B;;AAE1B,SAAKC,YAAL,GAAoBnB,OAAO,CAACI,OAA5B;AACA,SAAKW,KAAL,GAAa;AACXK,MAAAA,WAAW,EAAE,EADF;AAEXjB,MAAAA,SAAS,EAAE,CAFA;AAGXa,MAAAA,UAAU,EAAE,CAHD;AAIXC,MAAAA,SAAS,EAAE,CAJA;AAKXC,MAAAA,SAAS,EAAE;AALA,KAAb;AAOD;;AASD,QAAMG,iBAAN,GAA0B;AAAA,UAChBjB,OADgB,GACJ,KAAKL,KADD,CAChBK,OADgB;AAExB,UAAMkB,QAAQ,GAAG,MAAM,KAAKvB,KAAL,CAAWK,OAAX,CAAmBmB,IAAnB,CAAwBC,GAAxB,CAA4BC,WAA5B,EAAvB;AAEA,UAAM,KAAKxB,mBAAL,CAAyBqB,QAAQ,CAAC,CAAD,CAAjC,CAAN;AAEA,UAAMI,KAAK,GAAG,EAAd;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKb,KAAL,CAAWZ,SAAvB;;AACA,SAAK,IAAI0B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKd,KAAL,CAAWZ,SAA/B,EAA0C0B,CAAC,EAA3C,EAA+C;AAC7CH,MAAAA,KAAK,CAACI,IAAN,CACE1B,OAAO,CAACC,SAAR,CAAkBC,OAAlB,CAA0BC,OAA1B,CAAkCwB,aAAlC,CAAgDT,QAAQ,CAAC,CAAD,CAAxD,EAA6DO,CAA7D,EAAgEpB,IAAhE,EADF;AAGD;;AAED,UAAMO,UAAU,GAAGgB,OAAO,CAACC,GAAR,CAAYP,KAAZ,CAAnB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYZ,UAAZ,EAAwB,aAAxB;AAEAW,IAAAA,OAAO,CAACC,GAAR,CAAYxB,OAAZ,EAAqB,QAArB,EAlBwB,CAmBxB;AACA;;AACA,SAAKM,QAAL,CAAc;AAAEU,MAAAA,WAAW,EAAEE,QAAQ,CAAC,CAAD;AAAvB,KAAd;AACD;;AAuBDY,EAAAA,MAAM,GAAG;AACP,UAAMC,KAAK,GAAG,CACZ;AAAEvB,MAAAA,GAAG,EAAE,OAAP;AAAgBC,MAAAA,KAAK,EAAE,OAAvB;AAAgCC,MAAAA,KAAK,EAAE;AAAvC,KADY,EAEZ;AAAEF,MAAAA,GAAG,EAAE,OAAP;AAAgBC,MAAAA,KAAK,EAAE,OAAvB;AAAgCC,MAAAA,KAAK,EAAE;AAAvC,KAFY,EAGZ;AAAEF,MAAAA,GAAG,EAAE,SAAP;AAAkBC,MAAAA,KAAK,EAAE,SAAzB;AAAoCC,MAAAA,KAAK,EAAE;AAA3C,KAHY,CAAd;AAKA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEE;AACE,MAAA,KAAK,EAAE;AACLsB,QAAAA,OAAO,EAAE,MADJ;AAELC,QAAAA,cAAc,EAAE;AAFX,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAME,oBAAC,SAAD,CAAW,KAAX;AAAiB,MAAA,KAAK,EAAE,KAAK1B,YAAL,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,CAFF,CADF;AAaD;;AApFmD","sourcesContent":["import React from 'react';\nimport { Statistic } from 'semantic-ui-react';\n\nexport default class UserPage extends React.Component {\n  constructor(props, context) {\n    super(props);\n    this.drizzleState = context.drizzle;\n    this.state = {\n      userAddress: '',\n      numTweets: 0,\n      numReplies: 0,\n      following: 0,\n      followers: 0,\n    };\n  }\n\n  fetchNumberOfTweets = async address => {\n    const numTweets = await this.props.drizzle.contracts.Twittor.methods\n      .getNumTweets(address)\n      .call();\n    this.setState({ numTweets: numTweets });\n  };\n\n  async componentDidMount() {\n    const { drizzle } = this.props;\n    const accounts = await this.props.drizzle.web3.eth.getAccounts();\n\n    await this.fetchNumberOfTweets(accounts[0]);\n\n    const batch = [];\n\n    console.log(this.state.numTweets);\n    for (let i = 0; i < this.state.numTweets; i++) {\n      batch.push(\n        drizzle.contracts.Twittor.methods.getNumReplies(accounts[0], i).call()\n      );\n    }\n\n    const numReplies = Promise.all(batch);\n    console.log(numReplies, 'NUM REPLIES');\n\n    console.log(drizzle, 'dizzle');\n    // drizzle.contracts.Twittor.methods.getNumTweets.cacheCall(accounts[0]);\n    // drizzle.contracts.Twittor.methods.getNumTweets.cacheCall(accounts[0]);\n    this.setState({ userAddress: accounts[0] });\n  }\n\n  populateData = () => {\n    return [\n      { key: 'numTweets', label: 'Tweets', value: `${this.state.numTweets}` },\n      {\n        key: 'numReplies',\n        label: 'Replies',\n        value: `${this.state.numReplies}`,\n      },\n      {\n        key: 'following',\n        label: 'Following',\n        value: `${this.state.following}`,\n      },\n      {\n        key: 'followers',\n        label: 'Followers',\n        value: `${this.state.followers}`,\n      },\n    ];\n  };\n\n  render() {\n    const items = [\n      { key: 'faves', label: 'Faves', value: '22' },\n      { key: 'views', label: 'Views', value: '31,200' },\n      { key: 'members', label: 'Members', value: '22' },\n    ];\n    return (\n      <div>\n        <h1>User Page</h1>\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'center',\n          }}\n        >\n          <Statistic.Group items={this.populateData()} />\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}