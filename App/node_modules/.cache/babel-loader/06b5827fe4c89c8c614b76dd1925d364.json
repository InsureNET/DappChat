{"ast":null,"code":"var _jsxFileName = \"/Users/tristan/Documents/blockchain/Real Twittor/App/src/TweetForm.js\";\nimport { drizzleConnect } from \"drizzle-react\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst translateType = type => {\n  switch (true) {\n    case /^uint/.test(type):\n      return \"number\";\n\n    case /^string/.test(type) || /^bytes/.test(type):\n      return \"text\";\n\n    case /^bool/.test(type):\n      return \"checkbox\";\n\n    default:\n      return \"text\";\n  }\n};\n\nclass TweetForm extends Component {\n  constructor(props, context) {\n    super(props);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.contracts = context.drizzle.contracts;\n    this.utils = context.drizzle.web3.utils; // Get the contract ABI\n\n    const abi = this.contracts[this.props.contract].abi;\n    this.inputs = [];\n    var initialState = {}; // Iterate over abi for correct function.\n\n    for (var i = 0; i < abi.length; i++) {\n      if (abi[i].name === this.props.method) {\n        this.inputs = abi[i].inputs;\n\n        for (var j = 0; j < this.inputs.length; j++) {\n          initialState[this.inputs[j].name] = \"\";\n        }\n\n        break;\n      }\n    }\n\n    this.state = initialState;\n  }\n\n  findHashTag(str) {\n    this.setState({\n      hashT: str.split(' ').filter(word => {\n        return word[0] === '#';\n      })[0]\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const convertedInputs = this.inputs.map(input => {\n      if (input.type === \"bytes32\") {\n        return this.utils.toHex(this.state[input.name]);\n      }\n\n      return this.state[input.name];\n    });\n\n    if (this.props.sendArgs) {\n      return this.contracts[this.props.contract].methods[this.props.method].cacheSend(...convertedInputs, this.props.sendArgs);\n    }\n\n    return this.contracts[this.props.contract].methods[this.props.method].cacheSend(...convertedInputs);\n  }\n\n  handleInputChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n    this.findHashTag(this.state.tweet);\n    console.log(\"state\", this.state);\n  }\n\n  render() {\n    if (this.props.render) {\n      return this.props.render({\n        inputs: this.inputs,\n        inputTypes: this.inputs.map(input => translateType(input.type)),\n        state: this.state,\n        handleInputChange: this.handleInputChange,\n        handleSubmit: this.handleSubmit\n      });\n    } // this.inputs.length = 1\n\n\n    return React.createElement(\"form\", {\n      className: \"pure-form pure-form-stacked\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, this.inputs.map((input, index) => {\n      var inputType = translateType(input.type);\n      var inputLabel = this.props.labels ? this.props.labels[index] : input.name; // check if input type is struct and if so loop out struct fields as well\n\n      return React.createElement(\"input\", {\n        key: input.name,\n        type: inputType,\n        name: input.name,\n        value: this.state[input.name],\n        placeholder: inputLabel,\n        onChange: this.handleInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      });\n    }), React.createElement(\"button\", {\n      key: \"submit\",\n      className: \"pure-button\",\n      type: \"button\",\n      onClick: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"TWEET\"));\n  }\n\n}\n\nTweetForm.contextTypes = {\n  drizzle: PropTypes.object\n};\nTweetForm.propTypes = {\n  contract: PropTypes.string.isRequired,\n  method: PropTypes.string.isRequired,\n  sendArgs: PropTypes.object,\n  labels: PropTypes.arrayOf(PropTypes.string),\n  render: PropTypes.func\n};\n/*\n * Export connected component.\n */\n\nconst mapStateToProps = state => {\n  return {\n    contracts: state.contracts\n  };\n};\n\nexport default drizzleConnect(TweetForm, mapStateToProps);","map":{"version":3,"sources":["/Users/tristan/Documents/blockchain/Real Twittor/App/src/TweetForm.js"],"names":["drizzleConnect","React","Component","PropTypes","translateType","type","test","TweetForm","constructor","props","context","handleInputChange","bind","handleSubmit","contracts","drizzle","utils","web3","abi","contract","inputs","initialState","i","length","name","method","j","state","findHashTag","str","setState","hashT","split","filter","word","event","preventDefault","convertedInputs","map","input","toHex","sendArgs","methods","cacheSend","target","value","tweet","console","log","render","inputTypes","index","inputType","inputLabel","labels","contextTypes","object","propTypes","string","isRequired","arrayOf","func","mapStateToProps"],"mappings":"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","sourcesContent":["import { drizzleConnect } from \"drizzle-react\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst translateType = type => {\n  switch (true) {\n    case /^uint/.test(type):\n      return \"number\";\n    case /^string/.test(type) || /^bytes/.test(type):\n      return \"text\";\n    case /^bool/.test(type):\n      return \"checkbox\";\n    default:\n      return \"text\";\n  }\n};\n\nclass TweetForm extends Component {\n  constructor(props, context) {\n    super(props);\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n\n    this.contracts = context.drizzle.contracts;\n    this.utils = context.drizzle.web3.utils;\n\n    // Get the contract ABI\n    const abi = this.contracts[this.props.contract].abi;\n\n    this.inputs = [];\n    var initialState = {};\n\n    // Iterate over abi for correct function.\n    for (var i = 0; i < abi.length; i++) {\n      if (abi[i].name === this.props.method) {\n        this.inputs = abi[i].inputs;\n\n        for (var j = 0; j < this.inputs.length; j++) {\n          initialState[this.inputs[j].name] = \"\";\n        }\n\n        break;\n      }\n    }\n\n    this.state = initialState;\n  }\n\n  findHashTag(str) {\n      this.setState({hashT: str.split(' ').filter(word => {\n          return word[0] === '#'\n      })[0]})\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n\n   \n\n    const convertedInputs = this.inputs.map(input => {\n      if (input.type === \"bytes32\") {\n        return this.utils.toHex(this.state[input.name]);\n      }\n      return this.state[input.name];\n    });\n\n    if (this.props.sendArgs) {\n      return this.contracts[this.props.contract].methods[\n        this.props.method\n      ].cacheSend(...convertedInputs, this.props.sendArgs);\n    }\n\n    return this.contracts[this.props.contract].methods[\n      this.props.method\n    ].cacheSend(...convertedInputs);\n  }\n\n  handleInputChange(event) {\n    this.setState({ [event.target.name]: event.target.value });\n     this.findHashTag(this.state.tweet)\n    console.log(\"state\", this.state)\n  }\n\n  render() {\n    if (this.props.render) {\n      return this.props.render({\n        inputs: this.inputs,\n        inputTypes: this.inputs.map(input => translateType(input.type)),\n        state: this.state,\n        handleInputChange: this.handleInputChange,\n        handleSubmit: this.handleSubmit,\n      });\n    }\n\n// this.inputs.length = 1\n\n    return (\n      <form\n        className=\"pure-form pure-form-stacked\"\n        onSubmit={this.handleSubmit}\n      >\n        {this.inputs.map((input, index) => {\n          var inputType = translateType(input.type);\n          var inputLabel = this.props.labels\n            ? this.props.labels[index]\n            : input.name;\n          // check if input type is struct and if so loop out struct fields as well\n          return (\n            <input\n              key={input.name}\n              type={inputType}\n              name={input.name}\n              value={this.state[input.name]}\n              placeholder={inputLabel}\n              onChange={this.handleInputChange}\n            />\n          );\n        })}\n        <button\n          key=\"submit\"\n          className=\"pure-button\"\n          type=\"button\"\n          onClick={this.handleSubmit}\n        >\n          TWEET\n        </button>\n      </form>\n    );\n  }\n}\n\nTweetForm.contextTypes = {\n  drizzle: PropTypes.object,\n};\n\nTweetForm.propTypes = {\n  contract: PropTypes.string.isRequired,\n  method: PropTypes.string.isRequired,\n  sendArgs: PropTypes.object,\n  labels: PropTypes.arrayOf(PropTypes.string),\n  render: PropTypes.func,\n};\n\n/*\n * Export connected component.\n */\n\nconst mapStateToProps = state => {\n  return {\n    contracts: state.contracts,\n  };\n};\n\nexport default drizzleConnect(TweetForm, mapStateToProps);"]},"metadata":{},"sourceType":"module"}