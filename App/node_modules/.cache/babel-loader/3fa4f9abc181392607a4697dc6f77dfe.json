{"ast":null,"code":"var _jsxFileName = \"/Users/AlexMok/drizzletest/Twittor/App/src/UserPage.js\";\nimport React from 'react';\nimport { Statistic } from 'semantic-ui-react';\nexport default class UserPage extends React.Component {\n  constructor(props, context) {\n    super(props);\n\n    this.fetchNumberOfTweets = async address => {\n      console.log(this.props, 'props');\n      const numTweets = await this.props.drizzle.contracts.Twittor.methods.getNumTweets(address).call();\n      this.setState({\n        numTweets: numTweets\n      });\n      console.log(numTweets, 'numtweets');\n    };\n\n    this.fetchNumberOfReplies = async address => {\n      const batch = [];\n\n      for (let i = 0; i < this.state.numTweets; i++) {\n        batch.push(this.props.drizzle.contracts.Twittor.methods.getNumReplies(address, i).call());\n      }\n\n      const numReplies = await Promise.all(batch);\n      const numRepliesTotal = numReplies.filter(replyNum => replyNum > 0).reduce((acc, curr) => acc + +curr, 0);\n      this.setState({\n        numReplies: numRepliesTotal\n      });\n    };\n\n    this.fetchNumberOfFollowing = async address => {\n      let count = 0;\n      let currFollowing = await this.props.drizzle.contracts.Twittor.methods.viewFollowing(address, count).call();\n      console.log(currFollowing); // do {\n      //   currFollowing = await this.props.drizzle.contracts.Twittor.methods.viewFollowing(\n      //     address,\n      //     count\n      //   );\n      //   count++;\n      // } while (currFollowing);\n      // this.setState({ following: count });\n    };\n\n    this.populateData = () => {\n      return [{\n        key: 'numTweets',\n        label: 'Tweets',\n        value: \"\".concat(this.state.numTweets)\n      }, {\n        key: 'numReplies',\n        label: 'Replies',\n        value: \"\".concat(this.state.numReplies)\n      }, {\n        key: 'following',\n        label: 'Following',\n        value: \"\".concat(this.state.following)\n      }, {\n        key: 'followers',\n        label: 'Followers',\n        value: \"\".concat(this.state.followers)\n      }];\n    };\n\n    this.drizzleState = context.drizzle;\n    this.state = {\n      userAddress: this.props.props.match.params.address,\n      numTweets: 0,\n      numReplies: 0,\n      following: 0,\n      followers: 0\n    };\n  }\n\n  async componentDidMount() {\n    const userAddress = this.state.userAddress;\n\n    if (!userAddress) {\n      const accounts = await this.props.drizzle.web3.eth.getAccounts();\n      this.setState({\n        userAddress: accounts[0]\n      });\n    }\n\n    console.log(userAddress, 'USER ADDRESS');\n    await this.fetchNumberOfTweets(userAddress);\n    await this.fetchNumberOfReplies(userAddress); // await this.fetchNumberOfFollowing(accounts[0]);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"User Page\"), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"Address: \", this.state.userAddress), React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(Statistic.Group, {\n      items: this.populateData(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/AlexMok/drizzletest/Twittor/App/src/UserPage.js"],"names":["React","Statistic","UserPage","Component","constructor","props","context","fetchNumberOfTweets","address","console","log","numTweets","drizzle","contracts","Twittor","methods","getNumTweets","call","setState","fetchNumberOfReplies","batch","i","state","push","getNumReplies","numReplies","Promise","all","numRepliesTotal","filter","replyNum","reduce","acc","curr","fetchNumberOfFollowing","count","currFollowing","viewFollowing","populateData","key","label","value","following","followers","drizzleState","userAddress","match","params","componentDidMount","accounts","web3","eth","getAccounts","render","display","justifyContent"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,mBAA1B;AAEA,eAAe,MAAMC,QAAN,SAAuBF,KAAK,CAACG,SAA7B,CAAuC;AACpDC,EAAAA,WAAW,CAACC,KAAD,EAAQC,OAAR,EAAiB;AAC1B,UAAMD,KAAN;;AAD0B,SAY5BE,mBAZ4B,GAYN,MAAMC,OAAN,IAAiB;AACrCC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKL,KAAjB,EAAwB,OAAxB;AACA,YAAMM,SAAS,GAAG,MAAM,KAAKN,KAAL,CAAWO,OAAX,CAAmBC,SAAnB,CAA6BC,OAA7B,CAAqCC,OAArC,CACrBC,YADqB,CACRR,OADQ,EAErBS,IAFqB,EAAxB;AAGA,WAAKC,QAAL,CAAc;AAAEP,QAAAA,SAAS,EAAEA;AAAb,OAAd;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAYC,SAAZ,EAAuB,WAAvB;AACD,KAnB2B;;AAAA,SAqB5BQ,oBArB4B,GAqBL,MAAMX,OAAN,IAAiB;AACtC,YAAMY,KAAK,GAAG,EAAd;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,KAAL,CAAWX,SAA/B,EAA0CU,CAAC,EAA3C,EAA+C;AAC7CD,QAAAA,KAAK,CAACG,IAAN,CACE,KAAKlB,KAAL,CAAWO,OAAX,CAAmBC,SAAnB,CAA6BC,OAA7B,CAAqCC,OAArC,CACGS,aADH,CACiBhB,OADjB,EAC0Ba,CAD1B,EAEGJ,IAFH,EADF;AAKD;;AACD,YAAMQ,UAAU,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAYP,KAAZ,CAAzB;AACA,YAAMQ,eAAe,GAAGH,UAAU,CAC/BI,MADqB,CACdC,QAAQ,IAAIA,QAAQ,GAAG,CADT,EAErBC,MAFqB,CAEd,CAACC,GAAD,EAAMC,IAAN,KAAeD,GAAG,GAAG,CAACC,IAFR,EAEc,CAFd,CAAxB;AAGA,WAAKf,QAAL,CAAc;AAAEO,QAAAA,UAAU,EAAEG;AAAd,OAAd;AACD,KAnC2B;;AAAA,SAqC5BM,sBArC4B,GAqCH,MAAM1B,OAAN,IAAiB;AACxC,UAAI2B,KAAK,GAAG,CAAZ;AACA,UAAIC,aAAa,GAAG,MAAM,KAAK/B,KAAL,CAAWO,OAAX,CAAmBC,SAAnB,CAA6BC,OAA7B,CAAqCC,OAArC,CACvBsB,aADuB,CACT7B,OADS,EACA2B,KADA,EAEvBlB,IAFuB,EAA1B;AAGAR,MAAAA,OAAO,CAACC,GAAR,CAAY0B,aAAZ,EALwC,CAMxC;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACD,KApD2B;;AAAA,SAkE5BE,YAlE4B,GAkEb,MAAM;AACnB,aAAO,CACL;AAAEC,QAAAA,GAAG,EAAE,WAAP;AAAoBC,QAAAA,KAAK,EAAE,QAA3B;AAAqCC,QAAAA,KAAK,YAAK,KAAKnB,KAAL,CAAWX,SAAhB;AAA1C,OADK,EAEL;AACE4B,QAAAA,GAAG,EAAE,YADP;AAEEC,QAAAA,KAAK,EAAE,SAFT;AAGEC,QAAAA,KAAK,YAAK,KAAKnB,KAAL,CAAWG,UAAhB;AAHP,OAFK,EAOL;AACEc,QAAAA,GAAG,EAAE,WADP;AAEEC,QAAAA,KAAK,EAAE,WAFT;AAGEC,QAAAA,KAAK,YAAK,KAAKnB,KAAL,CAAWoB,SAAhB;AAHP,OAPK,EAYL;AACEH,QAAAA,GAAG,EAAE,WADP;AAEEC,QAAAA,KAAK,EAAE,WAFT;AAGEC,QAAAA,KAAK,YAAK,KAAKnB,KAAL,CAAWqB,SAAhB;AAHP,OAZK,CAAP;AAkBD,KArF2B;;AAE1B,SAAKC,YAAL,GAAoBtC,OAAO,CAACM,OAA5B;AACA,SAAKU,KAAL,GAAa;AACXuB,MAAAA,WAAW,EAAE,KAAKxC,KAAL,CAAWA,KAAX,CAAiByC,KAAjB,CAAuBC,MAAvB,CAA8BvC,OADhC;AAEXG,MAAAA,SAAS,EAAE,CAFA;AAGXc,MAAAA,UAAU,EAAE,CAHD;AAIXiB,MAAAA,SAAS,EAAE,CAJA;AAKXC,MAAAA,SAAS,EAAE;AALA,KAAb;AAOD;;AA4CD,QAAMK,iBAAN,GAA0B;AAAA,UAChBH,WADgB,GACA,KAAKvB,KADL,CAChBuB,WADgB;;AAExB,QAAI,CAACA,WAAL,EAAkB;AAChB,YAAMI,QAAQ,GAAG,MAAM,KAAK5C,KAAL,CAAWO,OAAX,CAAmBsC,IAAnB,CAAwBC,GAAxB,CAA4BC,WAA5B,EAAvB;AACA,WAAKlC,QAAL,CAAc;AAAE2B,QAAAA,WAAW,EAAEI,QAAQ,CAAC,CAAD;AAAvB,OAAd;AACD;;AACDxC,IAAAA,OAAO,CAACC,GAAR,CAAYmC,WAAZ,EAAyB,cAAzB;AACA,UAAM,KAAKtC,mBAAL,CAAyBsC,WAAzB,CAAN;AACA,UAAM,KAAK1B,oBAAL,CAA0B0B,WAA1B,CAAN,CARwB,CASxB;AACD;;AAuBDQ,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAc,KAAK/B,KAAL,CAAWuB,WAAzB,CAFF,EAGE;AACE,MAAA,KAAK,EAAE;AACLS,QAAAA,OAAO,EAAE,MADJ;AAELC,QAAAA,cAAc,EAAE;AAFX,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAME,oBAAC,SAAD,CAAW,KAAX;AAAiB,MAAA,KAAK,EAAE,KAAKjB,YAAL,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,CAHF,CADF;AAcD;;AAvGmD","sourcesContent":["import React from 'react';\nimport { Statistic } from 'semantic-ui-react';\n\nexport default class UserPage extends React.Component {\n  constructor(props, context) {\n    super(props);\n    this.drizzleState = context.drizzle;\n    this.state = {\n      userAddress: this.props.props.match.params.address,\n      numTweets: 0,\n      numReplies: 0,\n      following: 0,\n      followers: 0,\n    };\n  }\n\n  fetchNumberOfTweets = async address => {\n    console.log(this.props, 'props');\n    const numTweets = await this.props.drizzle.contracts.Twittor.methods\n      .getNumTweets(address)\n      .call();\n    this.setState({ numTweets: numTweets });\n    console.log(numTweets, 'numtweets');\n  };\n\n  fetchNumberOfReplies = async address => {\n    const batch = [];\n    for (let i = 0; i < this.state.numTweets; i++) {\n      batch.push(\n        this.props.drizzle.contracts.Twittor.methods\n          .getNumReplies(address, i)\n          .call()\n      );\n    }\n    const numReplies = await Promise.all(batch);\n    const numRepliesTotal = numReplies\n      .filter(replyNum => replyNum > 0)\n      .reduce((acc, curr) => acc + +curr, 0);\n    this.setState({ numReplies: numRepliesTotal });\n  };\n\n  fetchNumberOfFollowing = async address => {\n    let count = 0;\n    let currFollowing = await this.props.drizzle.contracts.Twittor.methods\n      .viewFollowing(address, count)\n      .call();\n    console.log(currFollowing);\n    // do {\n    //   currFollowing = await this.props.drizzle.contracts.Twittor.methods.viewFollowing(\n    //     address,\n    //     count\n    //   );\n    //   count++;\n    // } while (currFollowing);\n\n    // this.setState({ following: count });\n  };\n\n  async componentDidMount() {\n    const { userAddress } = this.state;\n    if (!userAddress) {\n      const accounts = await this.props.drizzle.web3.eth.getAccounts();\n      this.setState({ userAddress: accounts[0] });\n    }\n    console.log(userAddress, 'USER ADDRESS');\n    await this.fetchNumberOfTweets(userAddress);\n    await this.fetchNumberOfReplies(userAddress);\n    // await this.fetchNumberOfFollowing(accounts[0]);\n  }\n\n  populateData = () => {\n    return [\n      { key: 'numTweets', label: 'Tweets', value: `${this.state.numTweets}` },\n      {\n        key: 'numReplies',\n        label: 'Replies',\n        value: `${this.state.numReplies}`,\n      },\n      {\n        key: 'following',\n        label: 'Following',\n        value: `${this.state.following}`,\n      },\n      {\n        key: 'followers',\n        label: 'Followers',\n        value: `${this.state.followers}`,\n      },\n    ];\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>User Page</h1>\n        <h3>Address: {this.state.userAddress}</h3>\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'center',\n          }}\n        >\n          <Statistic.Group items={this.populateData()} />\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}