{"ast":null,"code":"var _jsxFileName = \"/Users/AlexMok/Twittor/App/src/MyComponent.js\";\nimport React from 'react';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { ContractData } from 'drizzle-react-components';\nimport TweetForm from './TweetForm';\nimport SingleTweet from './SingleTweet';\nimport { Drizzle } from 'drizzle';\nimport options from './drizzleOptions';\nconst drizzle = new Drizzle(options);\n\nconst getData = async (address, index) => {\n  //Looks up accounts and pulls the first one\n  // const accounts = await drizzle.web3.eth.getAccounts();\n  // const latestTweet = await drizzle.contracts.Twittor.methods\n  //   .getNumTweets(accounts[0])\n  //   .call();\n  const result = await drizzle.contracts.Twittor.methods.getEverythingTweetStruct(address, index).call(); // console.log(result, 'RESULT');\n\n  return result;\n};\n\nexport default class tweets extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {\n      userAddress: '',\n      numTweets: 0\n    };\n  }\n\n  async componentDidMount() {\n    const accounts = await drizzle.web3.eth.getAccounts();\n    const latestTweet = await drizzle.contracts.Twittor.methods.getNumTweets(accounts[0]).call();\n    this.setState({\n      userAddress: accounts[0],\n      numTweets: latestTweet\n    });\n  }\n\n  render() {\n    let length = 0;\n    const userAddress = this.props.accounts[0];\n    const getNumTweetsFirstKey = Object.keys(this.props.Twittor.getNumTweets)[0];\n\n    if (this.props.Twittor.getNumTweets[getNumTweetsFirstKey]) {\n      length = this.props.Twittor.getNumTweets[getNumTweetsFirstKey].value;\n    }\n\n    let mapArray = [];\n\n    if (length) {\n      mapArray.length = length;\n      mapArray.fill(1);\n    }\n\n    console.log(this.state.address, userAddress);\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(ToastContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"Test\"), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"TWEETS\"), React.createElement(TweetForm, {\n      contract: \"Twittor\",\n      method: \"addTweetStruct\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"allTweets\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, mapArray.map((tweet, idx) => {\n      return React.createElement(SingleTweet, {\n        address: userAddress,\n        index: idx,\n        key: idx,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      });\n    }).reverse()), React.createElement(\"div\", {\n      className: \"hide\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(ContractData, {\n      contract: \"Twittor\",\n      method: \"getNumTweets\",\n      methodArgs: [userAddress],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }))));\n  }\n\n}","map":{"version":3,"sources":["/Users/AlexMok/Twittor/App/src/MyComponent.js"],"names":["React","ToastContainer","ContractData","TweetForm","SingleTweet","Drizzle","options","drizzle","getData","address","index","result","contracts","Twittor","methods","getEverythingTweetStruct","call","tweets","Component","constructor","props","state","userAddress","numTweets","componentDidMount","accounts","web3","eth","getAccounts","latestTweet","getNumTweets","setState","render","length","getNumTweetsFirstKey","Object","keys","value","mapArray","fill","console","log","map","tweet","idx","reverse"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { ContractData } from 'drizzle-react-components';\nimport TweetForm from './TweetForm';\nimport SingleTweet from './SingleTweet';\nimport { Drizzle } from 'drizzle';\nimport options from './drizzleOptions';\n\nconst drizzle = new Drizzle(options);\nconst getData = async (address, index) => {\n  //Looks up accounts and pulls the first one\n  // const accounts = await drizzle.web3.eth.getAccounts();\n  // const latestTweet = await drizzle.contracts.Twittor.methods\n  //   .getNumTweets(accounts[0])\n  //   .call();\n\n  const result = await drizzle.contracts.Twittor.methods\n    .getEverythingTweetStruct(address, index)\n    .call();\n  // console.log(result, 'RESULT');\n  return result;\n};\n\nexport default class tweets extends React.Component {\n  constructor(props) {\n    super();\n\n    this.state = { userAddress: '', numTweets: 0 };\n  }\n  async componentDidMount() {\n    const accounts = await drizzle.web3.eth.getAccounts();\n    const latestTweet = await drizzle.contracts.Twittor.methods\n      .getNumTweets(accounts[0])\n      .call();\n    this.setState({ userAddress: accounts[0], numTweets: latestTweet });\n  }\n\n  render() {\n    let length = 0;\n    const userAddress = this.props.accounts[0];\n    const getNumTweetsFirstKey = Object.keys(\n      this.props.Twittor.getNumTweets\n    )[0];\n    if (this.props.Twittor.getNumTweets[getNumTweetsFirstKey]) {\n      length = this.props.Twittor.getNumTweets[getNumTweetsFirstKey].value;\n    }\n    let mapArray = [];\n    if (length) {\n      mapArray.length = length;\n      mapArray.fill(1);\n    }\n\n    console.log(this.state.address, userAddress);\n\n    return (\n      <div className=\"App\">\n        <ToastContainer />\n\n        <div>\n          <h1>Test</h1>\n          <h1>TWEETS</h1>\n          <TweetForm contract=\"Twittor\" method=\"addTweetStruct\" />\n          <div className=\"allTweets\">\n            {mapArray\n              .map((tweet, idx) => {\n                return (\n                  <SingleTweet address={userAddress} index={idx} key={idx} />\n                );\n              })\n              .reverse()}\n          </div>\n          <div className=\"hide\">\n            {\n              <ContractData\n                contract=\"Twittor\"\n                method=\"getNumTweets\"\n                methodArgs={[userAddress]}\n              />\n            }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}