{"ast":null,"code":"var _jsxFileName = \"/Users/AlexMok/drizzletest/Twittor/App/src/Channel.js\";\nimport React from 'react';\nimport ChannelMessage from './ChannelMessage';\nimport { toast, Flip } from 'react-toastify';\nimport { Button, Form, Message, Accordion, AccordionContent, AccordionTitle, Icon, Loader } from 'semantic-ui-react';\nexport default class Channel extends React.Component {\n  constructor(props) {\n    super();\n\n    this.getData = async (address, index) => {\n      console.log(this.props.channelIndex);\n      const result = await this.props.drizzle.contracts.Stealth.methods.getChannelData(1).call();\n      console.log(result);\n      return result;\n    };\n\n    this.handleInputChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault();\n      this.setState({\n        loading: true\n      });\n      toast.info('Processing message...', {\n        position: 'top-right',\n        autoClose: 10000,\n        transition: Flip\n      });\n\n      try {\n        await this.props.drizzle.contracts.Stealth.methods.addMessage(this.props.channelIndex, this.state.message).send({\n          from: this.props.address\n        });\n      } catch (error) {\n        toast.dismiss();\n        this.setState({\n          errorMessage: error.message\n        });\n      }\n\n      this.setState({\n        loading: false,\n        message: '',\n        errorMessage: ''\n      });\n    };\n\n    this.handleClick = (e, titleProps) => {\n      const index = titleProps.index;\n      const activeIndex = this.state.activeIndex;\n      const newIndex = activeIndex === index ? -1 : index;\n      this.setState({\n        activeIndex: newIndex\n      });\n    };\n\n    this.state = {\n      message: '',\n      activeIndex: false,\n      loading: false,\n      errorMessage: '',\n      displayReply: false,\n      loadingData: true\n    };\n  }\n\n  async componentDidMount() {\n    const channelData = await this.props.drizzle.contracts.Stealth.methods.getChannelData(this.props.channelIndex).call();\n    console.log(channelData, 'CHANNEL DATA');\n    this.props.drizzle.contracts.Stealth.methods.getChannelData.cacheCall(this.props.channelIndex);\n    this.setState(channelData);\n  }\n\n  render() {\n    const drizzleState = this.props.drizzleState;\n    let length = 0;\n    let identifier; // //Gets list of all single tweet keys\n\n    const keys = Object.keys(drizzleState.contracts.Stealth.getChannelData); // //Searches through the getNumReply arguments, matches the index, and saves indentifier\n\n    if (keys.length) {\n      for (let i = 0; i < keys.length; i++) {\n        // console.log(drizzleState.contracts.Stealth.getChannelData);\n        if (drizzleState.contracts.Stealth.getChannelData[keys[i]].args[0] === this.props.channelIndex) {\n          identifier = keys[i];\n          break;\n        }\n      } //   //Finds the newly updated num replies\n\n\n      if (identifier) {\n        length = drizzleState.contracts.Stealth.getChannelData[identifier].value[3];\n      }\n    }\n\n    let channelMessageArray = [];\n    const displayReply = this.state.displayReply;\n\n    for (let idx = 0; idx < length; idx++) {\n      channelMessageArray.push(React.createElement(AccordionContent, {\n        active: displayReply,\n        key: idx,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(ChannelMessage, {\n        userAddress: this.props.address,\n        channelIndex: this.props.channelIndex,\n        messageIndex: idx,\n        drizzle: this.props.drizzle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      })));\n    }\n\n    channelMessageArray.reverse(); // console.log(identifier, 'IDENTIFIER');\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Channel Owner:\", ' ', this.state[0] ? this.state[0] : React.createElement(Loader, {\n      size: \"mini\",\n      active: true,\n      inline: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"Channel Name:\", ' ', this.state[1] ? this.state[1] : React.createElement(Loader, {\n      size: \"mini\",\n      active: true,\n      inline: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"Channel Category:\", ' ', this.state[2] ? this.state[2] : React.createElement(Loader, {\n      size: \"mini\",\n      active: true,\n      inline: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, \"Restricted: \", this.state[4] ? 'True' : 'False'), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"Messages: \", length), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(Accordion, {\n      fluid: true,\n      styled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      error: !!this.state.errorMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      key: \"message\",\n      name: \"message\",\n      value: this.state.message,\n      placeholder: \"Message\",\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }), React.createElement(Message, {\n      error: true,\n      header: \"Oops!\",\n      content: this.state.errorMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }), React.createElement(Button, {\n      loading: this.state.loading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, \"Message\")), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, React.createElement(AccordionTitle, {\n      active: displayReply,\n      onClick: () => {\n        this.setState({\n          displayReply: !displayReply\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: \"dropdown\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }), \"Replies\"), channelMessageArray, React.createElement(AccordionContent, {\n      active: displayReply && channelMessageArray.length === 0,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, \"No replies yet\")))))));\n  }\n\n}","map":{"version":3,"sources":["/Users/AlexMok/drizzletest/Twittor/App/src/Channel.js"],"names":["React","ChannelMessage","toast","Flip","Button","Form","Message","Accordion","AccordionContent","AccordionTitle","Icon","Loader","Channel","Component","constructor","props","getData","address","index","console","log","channelIndex","result","drizzle","contracts","Stealth","methods","getChannelData","call","handleInputChange","event","setState","target","name","value","handleSubmit","preventDefault","loading","info","position","autoClose","transition","addMessage","state","message","send","from","error","dismiss","errorMessage","handleClick","e","titleProps","activeIndex","newIndex","displayReply","loadingData","componentDidMount","channelData","cacheCall","render","drizzleState","length","identifier","keys","Object","i","args","channelMessageArray","idx","push","reverse"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ChannelMessage from './ChannelMessage';\nimport { toast, Flip } from 'react-toastify';\nimport {\n  Button,\n  Form,\n  Message,\n  Accordion,\n  AccordionContent,\n  AccordionTitle,\n  Icon,\n  Loader,\n} from 'semantic-ui-react';\n\nexport default class Channel extends React.Component {\n  constructor(props) {\n    super();\n\n    this.state = {\n      message: '',\n      activeIndex: false,\n      loading: false,\n      errorMessage: '',\n      displayReply: false,\n      loadingData: true,\n    };\n  }\n  async componentDidMount() {\n    const channelData = await this.props.drizzle.contracts.Stealth.methods\n      .getChannelData(this.props.channelIndex)\n      .call();\n\n    console.log(channelData, 'CHANNEL DATA');\n    this.props.drizzle.contracts.Stealth.methods.getChannelData.cacheCall(\n      this.props.channelIndex\n    );\n\n    this.setState(channelData);\n  }\n\n  getData = async (address, index) => {\n    console.log(this.props.channelIndex);\n    const result = await this.props.drizzle.contracts.Stealth.methods\n      .getChannelData(1)\n      .call();\n    console.log(result);\n    return result;\n  };\n\n  handleInputChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  handleSubmit = async event => {\n    event.preventDefault();\n    this.setState({ loading: true });\n\n    toast.info('Processing message...', {\n      position: 'top-right',\n      autoClose: 10000,\n      transition: Flip,\n    });\n\n    try {\n      await this.props.drizzle.contracts.Stealth.methods\n        .addMessage(this.props.channelIndex, this.state.message)\n        .send({ from: this.props.address });\n    } catch (error) {\n      toast.dismiss();\n      this.setState({ errorMessage: error.message });\n    }\n    this.setState({ loading: false, message: '', errorMessage: '' });\n  };\n\n  handleClick = (e, titleProps) => {\n    const { index } = titleProps;\n    const { activeIndex } = this.state;\n    const newIndex = activeIndex === index ? -1 : index;\n\n    this.setState({ activeIndex: newIndex });\n  };\n\n  render() {\n    const { drizzleState } = this.props;\n    let length = 0;\n    let identifier;\n\n    // //Gets list of all single tweet keys\n    const keys = Object.keys(drizzleState.contracts.Stealth.getChannelData);\n\n    // //Searches through the getNumReply arguments, matches the index, and saves indentifier\n    if (keys.length) {\n      for (let i = 0; i < keys.length; i++) {\n        // console.log(drizzleState.contracts.Stealth.getChannelData);\n        if (\n          drizzleState.contracts.Stealth.getChannelData[keys[i]].args[0] ===\n          this.props.channelIndex\n        ) {\n          identifier = keys[i];\n          break;\n        }\n      }\n\n      //   //Finds the newly updated num replies\n      if (identifier) {\n        length =\n          drizzleState.contracts.Stealth.getChannelData[identifier].value[3];\n      }\n    }\n\n    let channelMessageArray = [];\n    const { displayReply } = this.state;\n\n    for (let idx = 0; idx < length; idx++) {\n      channelMessageArray.push(\n        <AccordionContent active={displayReply} key={idx}>\n          <ChannelMessage\n            userAddress={this.props.address}\n            channelIndex={this.props.channelIndex}\n            messageIndex={idx}\n            drizzle={this.props.drizzle}\n          />\n        </AccordionContent>\n      );\n    }\n    channelMessageArray.reverse();\n\n    // console.log(identifier, 'IDENTIFIER');\n    return (\n      <div>\n        <div>\n          Channel Owner:{' '}\n          {this.state[0] ? this.state[0] : <Loader size=\"mini\" active inline />}\n        </div>\n        <div>\n          Channel Name:{' '}\n          {this.state[1] ? this.state[1] : <Loader size=\"mini\" active inline />}\n        </div>\n        <div>\n          Channel Category:{' '}\n          {this.state[2] ? this.state[2] : <Loader size=\"mini\" active inline />}\n        </div>\n        <div>Restricted: {this.state[4] ? 'True' : 'False'}</div>\n        <p>Messages: {length}</p>\n\n        {/* Should move to new component */}\n        <div>\n          <Accordion fluid styled>\n            <div>\n              <Form\n                onSubmit={this.handleSubmit}\n                error={!!this.state.errorMessage}\n              >\n                <input\n                  key=\"message\"\n                  name=\"message\"\n                  value={this.state.message}\n                  placeholder=\"Message\"\n                  onChange={this.handleInputChange}\n                />\n                <Message\n                  error\n                  header=\"Oops!\"\n                  content={this.state.errorMessage}\n                />\n\n                <Button loading={this.state.loading}>Message</Button>\n              </Form>\n              <div>\n                <AccordionTitle\n                  active={displayReply}\n                  onClick={() => {\n                    this.setState({\n                      displayReply: !displayReply,\n                    });\n                  }}\n                >\n                  <Icon name=\"dropdown\" />\n                  Replies\n                </AccordionTitle>\n\n                {channelMessageArray}\n                <AccordionContent\n                  active={displayReply && channelMessageArray.length === 0}\n                >\n                  <h2>No replies yet</h2>\n                </AccordionContent>\n              </div>\n            </div>\n          </Accordion>\n        </div>\n        {/* Should move to new component */}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}