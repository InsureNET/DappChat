{"ast":null,"code":"var _jsxFileName = \"/Users/tristan/Documents/blockchain/Real Twittor/App/src/MyComponent.js\";\nimport React from 'react';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { ContractData, ContractForm } from 'drizzle-react-components';\nimport TweetForm from './TweetForm';\nimport SingleTweet from './SingleTweet';\nimport { Drizzle } from 'drizzle';\nimport options from './drizzleOptions';\nimport { DrizzleContext } from \"drizzle-react\"; // const drizzle = new Drizzle(options);\n\nexport default class tweets extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInputChange = event => {\n      this.setState({\n        tweet: event.target.value,\n        hashT: this.findHashTag(event.target.value)\n      });\n      console.log(this.state);\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      this.props.drizzle.contracts.Twittor.methods.addTweetStruct(this.state.tweet, this.state.hashT).send({\n        from: this.state.userAddress\n      });\n    };\n\n    this.getTweet = async index => {\n      console.log(\"props \", this.props);\n      const result = await this.props.drizzle.contracts.Twittor.methods.getEverythingTweetStruct(this.state.userAddress, index).call();\n      return result[0];\n    };\n\n    this.getNum = async index => {\n      console.log(\"props \", this.props);\n      const numTweets = await this.props.drizzle.contracts.Twittor.methods.getNumTweets(this.state.userAddress).call();\n      this.setState({\n        numTweets\n      });\n      console.log(\"numTweets\", numTweets);\n    };\n\n    this.state = {\n      userAddress: '',\n      tweet: \"\",\n      hashT: \"\",\n      numTweets: 0\n    };\n  }\n\n  async componentDidMount() {\n    // console.log(\"drizzle \", drizzle)\n    const accounts = await this.props.drizzle.web3.eth.getAccounts();\n    const numTweets = await this.props.drizzle.contracts.Twittor.methods.getNumTweets(this.state.userAddress).call();\n    this.setState({\n      userAddress: accounts[0],\n      numTweets\n    });\n  }\n\n  findHashTag(str) {\n    return str.split(' ').filter(word => {\n      return word[0] === '#';\n    })[0];\n  }\n\n  render() {\n    let length = this.state.numTweets; // const getNumTweetsFirstKey = Object.keys(\n    //   this.props.drizzleState.contracts.Twittor.getNumTweets\n    // )[1];\n    // if (this.props.drizzleState.contracts.Twittor.getNumTweets[getNumTweetsFirstKey]) {\n    //   length = this.props.drizzleState.contracts.Twittor.getNumTweets[getNumTweetsFirstKey].value;\n    // }\n\n    let mapArray = [];\n\n    if (length) {\n      mapArray.length = length;\n      mapArray.fill(1);\n    }\n\n    console.log(\"props\", this.props);\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(ToastContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.getTweet,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"GET TWEET\"), React.createElement(\"button\", {\n      onClick: this.getNum,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"GET Numtweets\"), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"TWEETS\"), React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      key: \"tweet\",\n      name: \"tweet\",\n      value: this.state.tweet,\n      placeholder: \"tweet\",\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"TWEET\")), React.createElement(\"div\", {\n      className: \"allTweets\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, mapArray.map((tweet, idx) => {\n      return React.createElement(SingleTweet, {\n        address: this.state.userAddress,\n        index: idx,\n        key: idx,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      });\n    }).reverse()), React.createElement(\"div\", {\n      className: \"hide\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/tristan/Documents/blockchain/Real Twittor/App/src/MyComponent.js"],"names":["React","ToastContainer","ContractData","ContractForm","TweetForm","SingleTweet","Drizzle","options","DrizzleContext","tweets","Component","constructor","props","handleInputChange","event","setState","tweet","target","value","hashT","findHashTag","console","log","state","handleSubmit","preventDefault","drizzle","contracts","Twittor","methods","addTweetStruct","send","from","userAddress","getTweet","index","result","getEverythingTweetStruct","call","getNum","numTweets","getNumTweets","componentDidMount","accounts","web3","eth","getAccounts","str","split","filter","word","render","length","mapArray","fill","map","idx","reverse"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { ContractData, ContractForm} from 'drizzle-react-components';\nimport TweetForm from './TweetForm';\nimport SingleTweet from './SingleTweet';\nimport { Drizzle } from 'drizzle';\nimport options from './drizzleOptions';\nimport { DrizzleContext } from \"drizzle-react\";\n\n// const drizzle = new Drizzle(options);\nexport default class tweets extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { userAddress: '',\n    tweet: \"\",\n    hashT: \"\",\n    numTweets: 0\n  };\n  }\n  async componentDidMount() {\n    // console.log(\"drizzle \", drizzle)\n    const accounts = await this.props.drizzle.web3.eth.getAccounts();\n    const numTweets = await this.props.drizzle.contracts.Twittor.methods.getNumTweets(this.state.userAddress).call();\n \n    this.setState({ userAddress: accounts[0], numTweets });\n  }\n\n  handleInputChange = (event) => {\n    this.setState({\n      tweet: event.target.value,\n      hashT: this.findHashTag(event.target.value),\n    });\n    console.log(this.state);\n  }\n\n  handleSubmit = (event) => {\n  event.preventDefault();\n\n\n  this.props.drizzle.contracts.Twittor.methods.addTweetStruct(this.state.tweet, this.state.hashT).send({from: this.state.userAddress})\n \n    \n}\n\n getTweet = async (index) => {\n  console.log(\"props \", this.props)\n  const result =  await this.props.drizzle.contracts.Twittor.methods.getEverythingTweetStruct(this.state.userAddress, index).call();\n  \n  return result[0];\n}\n\ngetNum = async (index) => {\n  console.log(\"props \", this.props)\n  const numTweets = await this.props.drizzle.contracts.Twittor.methods.getNumTweets(this.state.userAddress).call();\n  this.setState({numTweets})\n  console.log(\"numTweets\", numTweets);\n}\n\nfindHashTag(str) {\n  return str.split(' ').filter(word => {\n    return word[0] === '#';\n  })[0];\n}\n\n  render() {\n    let length = this.state.numTweets;\n    // const getNumTweetsFirstKey = Object.keys(\n    //   this.props.drizzleState.contracts.Twittor.getNumTweets\n    // )[1];\n    // if (this.props.drizzleState.contracts.Twittor.getNumTweets[getNumTweetsFirstKey]) {\n    //   length = this.props.drizzleState.contracts.Twittor.getNumTweets[getNumTweetsFirstKey].value;\n    // }\n    let mapArray = [];\n    if (length) {\n      mapArray.length = length;\n      mapArray.fill(1);\n    }\n    \n\n    console.log(\"props\", this.props)\n    return (\n      <div className=\"App\">\n        <ToastContainer />\n        {/* <h1>{tweet} </h1> */}\n        <div>\n          <button onClick = {this.getTweet} >GET TWEET</button>\n          <button onClick = {this.getNum} >GET Numtweets</button>\n\n          <h1>TWEETS</h1>\n          <form onSubmit = {this.handleSubmit}>\n          <input\n              key=\"tweet\"\n              name=\"tweet\"\n              value={this.state.tweet}\n              placeholder=\"tweet\"\n              onChange={this.handleInputChange}\n            />\n            <button type=\"submit\">TWEET</button>\n          </form>\n          {/* <TweetForm contract=\"Twittor\" method=\"addTweetStruct\" store = {this.props.drizzle}/> */}\n          <div className=\"allTweets\">\n            {mapArray\n              .map((tweet, idx) => {\n                return (\n                  <SingleTweet\n                    address={this.state.userAddress}\n                    index={idx}\n                    key={idx}\n                  />\n                );\n              })\n              .reverse()}\n          </div>\n          <div className=\"hide\">\n            {/* {\n              <ContractData\n                contract=\"Twittor\"\n                method=\"getNumTweets\"\n                methodArgs={[this.state.userAddress]}\n              />\n            } */}\n          </div>\n\n          {/* (\n  <DrizzleContext.Consumer>\n    {drizzleContext => {\n      const { drizzle, drizzleState, initialized } = drizzleContext;\n  \n      if (!initialized) {\n        return \"Loading...\";\n      }\n\n      return (\n      <div>\n      <TweetForm drizzle = {drizzle} drizzleState = {drizzleState} />\n      </div>\n\n      );\n    }}\n  </DrizzleContext.Consumer>\n) */}\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}