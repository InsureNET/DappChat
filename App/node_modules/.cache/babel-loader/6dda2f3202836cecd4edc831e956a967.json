{"ast":null,"code":"var _jsxFileName = \"/Users/AlexMok/drizzletest/Twittor/App/src/SingleTweet.js\";\nimport React from 'react';\nimport { Drizzle } from 'drizzle';\nimport options from './drizzleOptions';\nimport ReplyTweet from './ReplyTweet';\nconst drizzle = new Drizzle(options);\nexport default class SingleTweet extends React.Component {\n  constructor(props) {\n    super();\n\n    this.getData = async (address, index) => {\n      const result = await drizzle.contracts.Twittor.methods.getEverythingTweetStruct(address, index).call();\n      return result;\n    };\n\n    this.getReplyNum = async () => {\n      // console.log('props ', this.props);\n      const numReplies = await this.props.drizzle.contracts.Twittor.methods.getNumReplies(this.state.userAddress, this.props.index).call(); // const { drizzle } = this.props;\n\n      console.log(drizzle.contracts.Twittor.methods, 'METHODS');\n      const numR = await this.props.drizzle.contracts.Twittor.methods.getNumReplies(this.props.address, this.props.index).cacheCall();\n      console.log(numR, 'NUMR');\n      this.setState({\n        numReplies\n      }); // console.log('numTweets', numTweets);\n\n      this.forceUpdate();\n    };\n\n    this.handleInputChange = event => {\n      this.setState({\n        reply: event.target.value\n      }); // console.log(this.state);\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault();\n      console.log(this.state, 'WHAT IS BEING SUBMITTED');\n      await this.props.drizzle.contracts.Twittor.methods.addReply(this.props.address, this.props.index, this.state.reply).send({\n        from: this.props.address\n      });\n    };\n\n    this.state = {\n      reply: ''\n    };\n  }\n\n  async componentDidMount() {\n    await this.props.drizzle.contracts.Twittor.methods.getNumReplies.cacheCall(this.props.address, this.props.index);\n    const tweetData = await this.getData(this.props.address, this.props.index);\n    this.setState(tweetData);\n  }\n\n  render() {\n    const drizzleState = this.props.drizzleState;\n    let length = 0;\n    let identifier;\n    console.log(drizzleState.contracts.Twittor.getNumReplies, 'REPLY');\n    const keys = Object.keys(drizzleState.contracts.Twittor.getNumReplies);\n\n    if (keys.length) {\n      for (let i = 0; i < keys.length; i++) {\n        console.log(drizzleState.contracts.Twittor.getNumReplies[keys[i]]);\n\n        if (drizzleState.contracts.Twittor.getNumReplies[keys[i]].args[1] === this.props.index) {\n          identifier = drizzleState.contracts.Twittor.getNumReplies[i];\n        }\n      }\n\n      if (identifier) {\n        length = identifier.value;\n      }\n    }\n\n    let mapArray = [];\n\n    if (length) {\n      mapArray.length = length;\n      mapArray.fill(1);\n    } // console.log(this.props.drizzle);\n\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"Single\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"Address: \", this.props.address), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"Block Num: \", this.state[2]), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"Replies: \", length), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: () => this.setState({\n        displayReply: !this.state.displayReply\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Reply\"), this.state.displayReply ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      key: \"reply\",\n      name: \"reply\",\n      value: this.state.reply,\n      placeholder: \"reply\",\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"Reply\")), React.createElement(\"div\", {\n      style: {\n        border: 'solid'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, length ? mapArray.map((tweet, idx) => {\n      return React.createElement(ReplyTweet, {\n        address: this.props.address,\n        index: this.props.index,\n        replyIndex: idx,\n        key: idx,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      });\n    }).reverse() : React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"Length is false\"))) : React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"False\")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \"Tweet: \", this.state[0]));\n  }\n\n}","map":{"version":3,"sources":["/Users/AlexMok/drizzletest/Twittor/App/src/SingleTweet.js"],"names":["React","Drizzle","options","ReplyTweet","drizzle","SingleTweet","Component","constructor","props","getData","address","index","result","contracts","Twittor","methods","getEverythingTweetStruct","call","getReplyNum","numReplies","getNumReplies","state","userAddress","console","log","numR","cacheCall","setState","forceUpdate","handleInputChange","event","reply","target","value","handleSubmit","preventDefault","addReply","send","from","componentDidMount","tweetData","render","drizzleState","length","identifier","keys","Object","i","args","mapArray","fill","displayReply","border","map","tweet","idx","reverse"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Drizzle } from 'drizzle';\nimport options from './drizzleOptions';\nimport ReplyTweet from './ReplyTweet';\n\nconst drizzle = new Drizzle(options);\n\nexport default class SingleTweet extends React.Component {\n  constructor(props) {\n    super();\n\n    this.state = { reply: '' };\n  }\n  async componentDidMount() {\n    await this.props.drizzle.contracts.Twittor.methods.getNumReplies.cacheCall(\n      this.props.address,\n      this.props.index\n    );\n\n    const tweetData = await this.getData(this.props.address, this.props.index);\n    this.setState(tweetData);\n  }\n\n  getData = async (address, index) => {\n    const result = await drizzle.contracts.Twittor.methods\n      .getEverythingTweetStruct(address, index)\n      .call();\n    return result;\n  };\n\n  getReplyNum = async () => {\n    // console.log('props ', this.props);\n    const numReplies = await this.props.drizzle.contracts.Twittor.methods\n      .getNumReplies(this.state.userAddress, this.props.index)\n      .call();\n\n    // const { drizzle } = this.props;\n\n    console.log(drizzle.contracts.Twittor.methods, 'METHODS');\n    const numR = await this.props.drizzle.contracts.Twittor.methods\n      .getNumReplies(this.props.address, this.props.index)\n      .cacheCall();\n    console.log(numR, 'NUMR');\n\n    this.setState({ numReplies });\n    // console.log('numTweets', numTweets);\n    this.forceUpdate();\n  };\n\n  handleInputChange = event => {\n    this.setState({\n      reply: event.target.value,\n    });\n    // console.log(this.state);\n  };\n\n  handleSubmit = async event => {\n    event.preventDefault();\n    console.log(this.state, 'WHAT IS BEING SUBMITTED');\n    await this.props.drizzle.contracts.Twittor.methods\n      .addReply(this.props.address, this.props.index, this.state.reply)\n      .send({ from: this.props.address });\n  };\n\n  render() {\n    const { drizzleState } = this.props;\n    let length = 0;\n    let identifier;\n\n    console.log(drizzleState.contracts.Twittor.getNumReplies, 'REPLY');\n    const keys = Object.keys(drizzleState.contracts.Twittor.getNumReplies);\n\n    if (keys.length) {\n      for (let i = 0; i < keys.length; i++) {\n        console.log(drizzleState.contracts.Twittor.getNumReplies[keys[i]]);\n        if (\n          drizzleState.contracts.Twittor.getNumReplies[keys[i]].args[1] ===\n          this.props.index\n        ) {\n          identifier = drizzleState.contracts.Twittor.getNumReplies[i];\n        }\n      }\n\n      if (identifier) {\n        length = identifier.value;\n      }\n    }\n    let mapArray = [];\n    if (length) {\n      mapArray.length = length;\n      mapArray.fill(1);\n    }\n\n    // console.log(this.props.drizzle);\n    return (\n      <div>\n        <h1>Single</h1>\n        <p>Address: {this.props.address}</p>\n        <p>Block Num: {this.state[2]}</p>\n        <p>Replies: {length}</p>\n\n        <div>\n          <button\n            onClick={() =>\n              this.setState({ displayReply: !this.state.displayReply })\n            }\n          >\n            Reply\n          </button>\n          {this.state.displayReply ? (\n            <div>\n              <form onSubmit={this.handleSubmit}>\n                <input\n                  key=\"reply\"\n                  name=\"reply\"\n                  value={this.state.reply}\n                  placeholder=\"reply\"\n                  onChange={this.handleInputChange}\n                />\n                <button type=\"submit\">Reply</button>\n              </form>\n\n              <div style={{ border: 'solid' }}>\n                {length ? (\n                  mapArray\n                    .map((tweet, idx) => {\n                      return (\n                        <ReplyTweet\n                          address={this.props.address}\n                          index={this.props.index}\n                          replyIndex={idx}\n                          key={idx}\n                        />\n                      );\n                    })\n                    .reverse()\n                ) : (\n                  <h2>Length is false</h2>\n                )}\n              </div>\n            </div>\n          ) : (\n            <h1>False</h1>\n          )}\n        </div>\n\n        <p>Tweet: {this.state[0]}</p>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}