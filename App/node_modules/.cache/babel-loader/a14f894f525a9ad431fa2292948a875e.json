{"ast":null,"code":"var _jsxFileName = \"/Users/AlexMok/drizzletest/Twittor/App/src/UserPage.js\";\nimport React from 'react';\nimport { Statistic } from 'semantic-ui-react';\nexport default class UserPage extends React.Component {\n  constructor(props, context) {\n    super(props);\n\n    this.fetchNumberOfTweets = async address => {\n      const numTweets = await this.props.drizzle.contracts.Twittor.methods.getNumTweets(address).call();\n      this.setState({\n        numTweets: numTweets\n      });\n    };\n\n    this.fetchNumberOfReplies = async address => {\n      const batch = [];\n\n      for (let i = 0; i < this.state.numTweets; i++) {\n        batch.push(this.props.drizzle.contracts.Twittor.methods.getNumReplies(address, i).call());\n      }\n\n      const numReplies = await Promise.all(batch);\n      const numRepliesTotal = numReplies.filter(replyNum => replyNum > 0).reduce((acc, curr) => acc + +curr, 0);\n      console.log(numReplies, ' num replies');\n      this.setState({\n        numReplies: numRepliesTotal\n      });\n    };\n\n    this.fetchNumberOfFollowing = async address => {\n      let count = 0;\n      let currFollowing;\n\n      do {\n        currFollowing = await this.props.drizzle.contracts.Twittor.methods.viewFollowing(address, count);\n        count++;\n      } while (currFollowing);\n\n      this.setState({\n        following: count\n      });\n    };\n\n    this.populateData = () => {\n      return [{\n        key: 'numTweets',\n        label: 'Tweets',\n        value: \"\".concat(this.state.numTweets)\n      }, {\n        key: 'numReplies',\n        label: 'Replies',\n        value: \"\".concat(this.state.numReplies)\n      }, {\n        key: 'following',\n        label: 'Following',\n        value: \"\".concat(this.state.following)\n      }, {\n        key: 'followers',\n        label: 'Followers',\n        value: \"\".concat(this.state.followers)\n      }];\n    };\n\n    this.drizzleState = context.drizzle;\n    this.state = {\n      userAddress: '',\n      numTweets: 0,\n      numReplies: 0,\n      following: 0,\n      followers: 0\n    };\n  }\n\n  async componentDidMount() {\n    const drizzle = this.props.drizzle;\n    const accounts = await drizzle.web3.eth.getAccounts();\n    this.setState({\n      userAddress: accounts[0]\n    });\n    await this.fetchNumberOfTweets(accounts[0]);\n    await this.fetchNumberOfReplies(accounts[0]);\n    await this.fetchNumberOfFollowing(accounts[0]);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"User Page\"), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"Address: \", this.state.userAddress), React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(Statistic.Group, {\n      items: this.populateData(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/AlexMok/drizzletest/Twittor/App/src/UserPage.js"],"names":["React","Statistic","UserPage","Component","constructor","props","context","fetchNumberOfTweets","address","numTweets","drizzle","contracts","Twittor","methods","getNumTweets","call","setState","fetchNumberOfReplies","batch","i","state","push","getNumReplies","numReplies","Promise","all","numRepliesTotal","filter","replyNum","reduce","acc","curr","console","log","fetchNumberOfFollowing","count","currFollowing","viewFollowing","following","populateData","key","label","value","followers","drizzleState","userAddress","componentDidMount","accounts","web3","eth","getAccounts","render","display","justifyContent"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Statistic } from 'semantic-ui-react';\n\nexport default class UserPage extends React.Component {\n  constructor(props, context) {\n    super(props);\n    this.drizzleState = context.drizzle;\n    this.state = {\n      userAddress: '',\n      numTweets: 0,\n      numReplies: 0,\n      following: 0,\n      followers: 0,\n    };\n  }\n\n  fetchNumberOfTweets = async address => {\n    const numTweets = await this.props.drizzle.contracts.Twittor.methods\n      .getNumTweets(address)\n      .call();\n    this.setState({ numTweets: numTweets });\n  };\n\n  fetchNumberOfReplies = async address => {\n    const batch = [];\n    for (let i = 0; i < this.state.numTweets; i++) {\n      batch.push(\n        this.props.drizzle.contracts.Twittor.methods\n          .getNumReplies(address, i)\n          .call()\n      );\n    }\n\n    const numReplies = await Promise.all(batch);\n    const numRepliesTotal = numReplies\n      .filter(replyNum => replyNum > 0)\n      .reduce((acc, curr) => acc + +curr, 0);\n    console.log(numReplies, ' num replies');\n    this.setState({ numReplies: numRepliesTotal });\n  };\n\n  fetchNumberOfFollowing = async address => {\n    let count = 0;\n    let currFollowing;\n    do {\n      currFollowing = await this.props.drizzle.contracts.Twittor.methods.viewFollowing(\n        address,\n        count\n      );\n      count++;\n    } while (currFollowing);\n\n    this.setState({ following: count });\n  };\n\n  async componentDidMount() {\n    const { drizzle } = this.props;\n    const accounts = await drizzle.web3.eth.getAccounts();\n    this.setState({ userAddress: accounts[0] });\n\n    await this.fetchNumberOfTweets(accounts[0]);\n    await this.fetchNumberOfReplies(accounts[0]);\n    await this.fetchNumberOfFollowing(accounts[0]);\n  }\n\n  populateData = () => {\n    return [\n      { key: 'numTweets', label: 'Tweets', value: `${this.state.numTweets}` },\n      {\n        key: 'numReplies',\n        label: 'Replies',\n        value: `${this.state.numReplies}`,\n      },\n      {\n        key: 'following',\n        label: 'Following',\n        value: `${this.state.following}`,\n      },\n      {\n        key: 'followers',\n        label: 'Followers',\n        value: `${this.state.followers}`,\n      },\n    ];\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>User Page</h1>\n        <h3>Address: {this.state.userAddress}</h3>\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'center',\n          }}\n        >\n          <Statistic.Group items={this.populateData()} />\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}