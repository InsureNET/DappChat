{"ast":null,"code":"var _jsxFileName = \"/Users/AlexMok/drizzletest/Twittor/App/src/UserPage.js\";\nimport React from 'react';\nimport { Statistic } from 'semantic-ui-react';\nexport default class UserPage extends React.Component {\n  constructor(props, context) {\n    super(props);\n\n    this.populateData = () => {\n      return [{\n        key: 'numTweets',\n        label: 'Tweets',\n        value: \"\".concat(this.state.numTweets)\n      }, {\n        key: 'numReplies',\n        label: 'Replies',\n        value: \"\".concat(this.state.numReplies)\n      }, {\n        key: 'following',\n        label: 'Following',\n        value: \"\".concat(this.state.following)\n      }, {\n        key: 'followers',\n        label: 'Followers',\n        value: \"\".concat(this.state.followers)\n      }];\n    };\n\n    this.drizzleState = context.drizzle;\n    this.state = {\n      userAddress: '',\n      numTweets: 0,\n      numReplies: 0,\n      following: 0,\n      followers: 0\n    };\n  }\n\n  async componentDidMount() {\n    const drizzle = this.props.drizzle;\n    const accounts = await this.props.drizzle.web3.eth.getAccounts();\n    const batch = new drizzle.BatchRequest();\n    batch.add(drizzle.contracts.Twittor.methods.getNumTweets(accounts[0]));\n    console.log(drizzle, 'dizzle', batch, 'batch'); // drizzle.contracts.Twittor.methods.getNumTweets.cacheCall(accounts[0]);\n    // drizzle.contracts.Twittor.methods.getNumTweets.cacheCall(accounts[0]);\n\n    this.setState({\n      userAddress: accounts[0]\n    });\n  }\n\n  render() {\n    const items = [{\n      key: 'faves',\n      label: 'Faves',\n      value: '22'\n    }, {\n      key: 'views',\n      label: 'Views',\n      value: '31,200'\n    }, {\n      key: 'members',\n      label: 'Members',\n      value: '22'\n    }];\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"User Page\"), React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(Statistic.Group, {\n      items: this.populateData(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/AlexMok/drizzletest/Twittor/App/src/UserPage.js"],"names":["React","Statistic","UserPage","Component","constructor","props","context","populateData","key","label","value","state","numTweets","numReplies","following","followers","drizzleState","drizzle","userAddress","componentDidMount","accounts","web3","eth","getAccounts","batch","BatchRequest","add","contracts","Twittor","methods","getNumTweets","console","log","setState","render","items","display","justifyContent"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Statistic } from 'semantic-ui-react';\n\nexport default class UserPage extends React.Component {\n  constructor(props, context) {\n    super(props);\n    this.drizzleState = context.drizzle;\n    this.state = {\n      userAddress: '',\n      numTweets: 0,\n      numReplies: 0,\n      following: 0,\n      followers: 0,\n    };\n  }\n\n  async componentDidMount() {\n    const { drizzle } = this.props;\n    const accounts = await this.props.drizzle.web3.eth.getAccounts();\n\n    const batch = new drizzle.BatchRequest();\n    batch.add(drizzle.contracts.Twittor.methods.getNumTweets(accounts[0]));\n    console.log(drizzle, 'dizzle', batch, 'batch');\n    // drizzle.contracts.Twittor.methods.getNumTweets.cacheCall(accounts[0]);\n    // drizzle.contracts.Twittor.methods.getNumTweets.cacheCall(accounts[0]);\n    this.setState({ userAddress: accounts[0] });\n  }\n\n  populateData = () => {\n    return [\n      { key: 'numTweets', label: 'Tweets', value: `${this.state.numTweets}` },\n      {\n        key: 'numReplies',\n        label: 'Replies',\n        value: `${this.state.numReplies}`,\n      },\n      {\n        key: 'following',\n        label: 'Following',\n        value: `${this.state.following}`,\n      },\n      {\n        key: 'followers',\n        label: 'Followers',\n        value: `${this.state.followers}`,\n      },\n    ];\n  };\n\n  render() {\n    const items = [\n      { key: 'faves', label: 'Faves', value: '22' },\n      { key: 'views', label: 'Views', value: '31,200' },\n      { key: 'members', label: 'Members', value: '22' },\n    ];\n    return (\n      <div>\n        <h1>User Page</h1>\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'center',\n          }}\n        >\n          <Statistic.Group items={this.populateData()} />\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}