{"ast":null,"code":"var _jsxFileName = \"/Users/AlexMok/drizzletest/Twittor/App/src/MyComponent.js\";\nimport React from 'react';\nimport { ToastContainer, toast, Flip } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport SingleTweet from './SingleTweet';\nimport { Button, Form, Message } from 'semantic-ui-react';\nimport UserPage from './UserPage';\nimport { Link } from 'react-router-dom';\nexport default class tweets extends React.Component {\n  constructor(props, context) {\n    super(props);\n\n    this.handleInputChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault();\n      this.setState({\n        loading: true\n      });\n      toast.info('Processing tweet...', {\n        position: 'top-right',\n        autoClose: 10000,\n        transition: Flip\n      });\n\n      try {\n        await this.props.drizzle.contracts.Stealth.methods.addTweetStruct(this.state.tweet, this.state.hashT).send({\n          from: this.state.userAddress\n        });\n      } catch (error) {\n        this.setState({\n          errorMessage: error.message\n        });\n        toast.dismiss();\n      }\n\n      this.setState({\n        loading: false,\n        tweet: '',\n        hashT: ''\n      });\n    };\n\n    this.getTweet = async index => {\n      const result = await this.props.drizzle.contracts.Stealth.methods.getEverythingTweetStruct(this.state.userAddress, index).call();\n      return result[0];\n    };\n\n    this.getNum = async index => {\n      const numTweets = await this.props.drizzle.contracts.Stealth.methods.getNumTweets(this.state.userAddress).call();\n      this.setState({\n        numTweets\n      });\n      this.forceUpdate();\n    };\n\n    this.drizzleState = context.drizzle;\n    this.state = {\n      userAddress: this.props.props.match.params.address || '',\n      channelName: '',\n      category: '',\n      restrictedStatus: false,\n      loading: false,\n      errorMessage: ''\n    };\n  }\n\n  async componentDidMount() {\n    if (!this.state.userAddress) {\n      const accounts = await this.props.drizzle.web3.eth.getAccounts();\n      this.setState({\n        userAddress: accounts[0]\n      });\n    }\n\n    this.props.drizzle.contracts.Stealth.methods.getChannelData.cacheCall(0); // await this.props.drizzle.contracts.Stealth.methods\n    //   .addChannelStruct('Channel Name', 'Channel Category', false)\n    //   .send({ from: this.state.userAddress });\n  }\n\n  findHashTag(str) {\n    const hashTagIndex = str.indexOf('#');\n    let hashTag = '';\n\n    if (hashTagIndex !== -1) {\n      let endOfHashT = str.indexOf(' ', hashTagIndex);\n      if (endOfHashT === -1) endOfHashT = str.length;\n      hashTag = str.slice(hashTagIndex, endOfHashT);\n    }\n\n    return hashTag || '';\n  }\n\n  render() {\n    const drizzleState = this.props.drizzleState;\n    let length = 0;\n    const key = Object.keys(drizzleState.contracts.Stealth.getChannelData)[0];\n\n    if (drizzleState.contracts.Stealth.getChannelData[key]) {\n      length = drizzleState.contracts.Stealth.getChannelData[key].value[3];\n    }\n\n    let mapArray = [];\n\n    if (length) {\n      mapArray.length = length;\n      mapArray.fill(1);\n    }\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(ToastContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), React.createElement(Button, {\n      href: \"/UserPage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"User Page\"), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, length, \" \"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, this.state.userAddress, \"'s Tweets\"), React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      error: !!this.state.errorMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      key: \"channelName\",\n      name: \"channelName\",\n      value: this.state.channelName,\n      placeholder: \"Channel Name\",\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      key: \"category\",\n      name: \"category\",\n      value: this.state.category,\n      placeholder: \"Channel Category\",\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }), React.createElement(Message, {\n      error: true,\n      header: \"Oops!\",\n      content: this.state.errorMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), React.createElement(Button, {\n      primary: true,\n      loading: this.state.loading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"Tweet\")), React.createElement(\"div\", {\n      className: \"allTweets\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, mapArray.map((tweet, idx) => {\n      return React.createElement(SingleTweet, {\n        address: this.state.userAddress,\n        index: idx,\n        key: idx,\n        drizzle: this.props.drizzle,\n        drizzleState: drizzleState,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      });\n    }).reverse())));\n  }\n\n}","map":{"version":3,"sources":["/Users/AlexMok/drizzletest/Twittor/App/src/MyComponent.js"],"names":["React","ToastContainer","toast","Flip","SingleTweet","Button","Form","Message","UserPage","Link","tweets","Component","constructor","props","context","handleInputChange","event","setState","target","name","value","handleSubmit","preventDefault","loading","info","position","autoClose","transition","drizzle","contracts","Stealth","methods","addTweetStruct","state","tweet","hashT","send","from","userAddress","error","errorMessage","message","dismiss","getTweet","index","result","getEverythingTweetStruct","call","getNum","numTweets","getNumTweets","forceUpdate","drizzleState","match","params","address","channelName","category","restrictedStatus","componentDidMount","accounts","web3","eth","getAccounts","getChannelData","cacheCall","findHashTag","str","hashTagIndex","indexOf","hashTag","endOfHashT","length","slice","render","key","Object","keys","mapArray","fill","map","idx","reverse"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { ToastContainer, toast, Flip } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport SingleTweet from './SingleTweet';\nimport { Button, Form, Message } from 'semantic-ui-react';\nimport UserPage from './UserPage';\nimport { Link } from 'react-router-dom';\n\nexport default class tweets extends React.Component {\n  constructor(props, context) {\n    super(props);\n    this.drizzleState = context.drizzle;\n    this.state = {\n      userAddress: this.props.props.match.params.address || '',\n      channelName: '',\n      category: '',\n      restrictedStatus: false,\n      loading: false,\n      errorMessage: '',\n    };\n  }\n  async componentDidMount() {\n    if (!this.state.userAddress) {\n      const accounts = await this.props.drizzle.web3.eth.getAccounts();\n      this.setState({ userAddress: accounts[0] });\n    }\n    this.props.drizzle.contracts.Stealth.methods.getChannelData.cacheCall(0);\n    // await this.props.drizzle.contracts.Stealth.methods\n    //   .addChannelStruct('Channel Name', 'Channel Category', false)\n    //   .send({ from: this.state.userAddress });\n  }\n\n  handleInputChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  handleSubmit = async event => {\n    event.preventDefault();\n    this.setState({ loading: true });\n    toast.info('Processing tweet...', {\n      position: 'top-right',\n      autoClose: 10000,\n      transition: Flip,\n    });\n\n    try {\n      await this.props.drizzle.contracts.Stealth.methods\n        .addTweetStruct(this.state.tweet, this.state.hashT)\n        .send({ from: this.state.userAddress });\n    } catch (error) {\n      this.setState({ errorMessage: error.message });\n      toast.dismiss();\n    }\n\n    this.setState({ loading: false, tweet: '', hashT: '' });\n  };\n\n  getTweet = async index => {\n    const result = await this.props.drizzle.contracts.Stealth.methods\n      .getEverythingTweetStruct(this.state.userAddress, index)\n      .call();\n\n    return result[0];\n  };\n\n  getNum = async index => {\n    const numTweets = await this.props.drizzle.contracts.Stealth.methods\n      .getNumTweets(this.state.userAddress)\n      .call();\n    this.setState({ numTweets });\n    this.forceUpdate();\n  };\n\n  findHashTag(str) {\n    const hashTagIndex = str.indexOf('#');\n    let hashTag = '';\n\n    if (hashTagIndex !== -1) {\n      let endOfHashT = str.indexOf(' ', hashTagIndex);\n      if (endOfHashT === -1) endOfHashT = str.length;\n      hashTag = str.slice(hashTagIndex, endOfHashT);\n    }\n    return hashTag || '';\n  }\n\n  render() {\n    const { drizzleState } = this.props;\n    let length = 0;\n    const key = Object.keys(drizzleState.contracts.Stealth.getChannelData)[0];\n    if (drizzleState.contracts.Stealth.getChannelData[key]) {\n      length = drizzleState.contracts.Stealth.getChannelData[key].value[3];\n    }\n\n    let mapArray = [];\n    if (length) {\n      mapArray.length = length;\n      mapArray.fill(1);\n    }\n\n    return (\n      <div className=\"App\">\n        <ToastContainer />\n        <Button href=\"/UserPage\">User Page</Button>\n        {<h1>{length} </h1>}\n        <div>\n          <h1>{this.state.userAddress}'s Tweets</h1>\n          <Form onSubmit={this.handleSubmit} error={!!this.state.errorMessage}>\n            <input\n              key=\"channelName\"\n              name=\"channelName\"\n              value={this.state.channelName}\n              placeholder=\"Channel Name\"\n              onChange={this.handleInputChange}\n            />\n            <input\n              key=\"category\"\n              name=\"category\"\n              value={this.state.category}\n              placeholder=\"Channel Category\"\n              onChange={this.handleInputChange}\n            />\n            {/* <select\n              key=\"restrictedStatus\"\n              name=\"restrictedStatus\"\n              value={this.state.restrictedStatus}\n              placeholder=\"Channel Name\"\n              onChange={this.handleInputChange}\n            /> */}\n            <Message error header=\"Oops!\" content={this.state.errorMessage} />\n            <Button primary loading={this.state.loading}>\n              Tweet\n            </Button>\n          </Form>\n          <div className=\"allTweets\">\n            {mapArray\n              .map((tweet, idx) => {\n                return (\n                  <SingleTweet\n                    address={this.state.userAddress}\n                    index={idx}\n                    key={idx}\n                    drizzle={this.props.drizzle}\n                    drizzleState={drizzleState}\n                  />\n                );\n              })\n              .reverse()}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}