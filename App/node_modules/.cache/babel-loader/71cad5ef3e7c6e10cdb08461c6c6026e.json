{"ast":null,"code":"var _jsxFileName = \"/Users/AlexMok/drizzletest/Twittor/App/src/UserPage.js\";\nimport React from 'react';\nimport { Dimmer, Loader, Image, Segment, Statistic } from 'semantic-ui-react';\nexport default class UserPage extends React.Component {\n  constructor(props, context) {\n    super(props);\n\n    this.fetchNumberOfTweets = async address => {\n      const numTweets = await this.props.drizzle.contracts.Twittor.methods.getNumTweets(address).call();\n      this.setState({\n        numTweets: numTweets\n      });\n    };\n\n    this.fetchNumberOfReplies = async address => {\n      const batch = [];\n\n      for (let i = 0; i < this.state.numTweets; i++) {\n        batch.push(this.props.drizzle.contracts.Twittor.methods.getNumReplies(address, i).call());\n      }\n\n      const numReplies = await Promise.all(batch);\n      const numRepliesTotal = numReplies.reduce((acc, curr) => acc + +curr, 0);\n      this.setState({\n        numReplies: numRepliesTotal\n      });\n    };\n\n    this.fetchNumberOfFollowing = async address => {\n      let count = 0;\n      let currFollowing;\n\n      try {\n        currFollowing = await this.props.drizzle.contracts.Twittor.methods.viewFollowing(address, count).call();\n      } catch (error) {\n        console.log(error.message, 'ERROR');\n      }\n\n      console.log(currFollowing); // do {\n      //   currFollowing = await this.props.drizzle.contracts.Twittor.methods.viewFollowing(\n      //     address,\n      //     count\n      //   );\n      //   count++;\n      // } while (currFollowing);\n      // this.setState({ following: count });\n    };\n\n    this.populateData = () => {\n      return [{\n        key: 'numTweets',\n        label: 'Tweets',\n        value: \"\".concat(this.state.numTweets)\n      }, {\n        key: 'numReplies',\n        label: 'Replies',\n        value: \"\".concat(this.state.numReplies)\n      }, {\n        key: 'following',\n        label: 'Following',\n        value: \"\".concat(this.state.following)\n      }, {\n        key: 'followers',\n        label: 'Followers',\n        value: \"\".concat(this.state.followers)\n      }];\n    };\n\n    this.drizzleState = context.drizzle;\n    this.state = {\n      userAddress: this.props.props.match.params.address,\n      numTweets: 0,\n      numReplies: 0,\n      following: 0,\n      followers: 0,\n      loading: true\n    };\n  }\n\n  async componentDidMount() {\n    if (!this.state.userAddress) {\n      const accounts = await this.props.drizzle.web3.eth.getAccounts();\n      this.setState({\n        userAddress: accounts[0]\n      });\n    }\n\n    const userAddress = this.state.userAddress;\n    await this.fetchNumberOfTweets(userAddress);\n    await this.fetchNumberOfReplies(userAddress); // await this.fetchNumberOfFollowing(userAddress);\n\n    this.setState({\n      loading: false\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        alignItems: 'center',\n        flexDirection: 'column'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"User Page\"), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"Address: \", this.state.userAddress), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(Statistic.Group, {\n      items: this.populateData(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    })), React.createElement(Loader, {\n      size: \"massive\",\n      active: this.state.loading,\n      inline: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"Loading\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/AlexMok/drizzletest/Twittor/App/src/UserPage.js"],"names":["React","Dimmer","Loader","Image","Segment","Statistic","UserPage","Component","constructor","props","context","fetchNumberOfTweets","address","numTweets","drizzle","contracts","Twittor","methods","getNumTweets","call","setState","fetchNumberOfReplies","batch","i","state","push","getNumReplies","numReplies","Promise","all","numRepliesTotal","reduce","acc","curr","fetchNumberOfFollowing","count","currFollowing","viewFollowing","error","console","log","message","populateData","key","label","value","following","followers","drizzleState","userAddress","match","params","loading","componentDidMount","accounts","web3","eth","getAccounts","render","display","alignItems","flexDirection"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Dimmer, Loader, Image, Segment, Statistic } from 'semantic-ui-react';\n\nexport default class UserPage extends React.Component {\n  constructor(props, context) {\n    super(props);\n    this.drizzleState = context.drizzle;\n    this.state = {\n      userAddress: this.props.props.match.params.address,\n      numTweets: 0,\n      numReplies: 0,\n      following: 0,\n      followers: 0,\n      loading: true,\n    };\n  }\n\n  fetchNumberOfTweets = async address => {\n    const numTweets = await this.props.drizzle.contracts.Twittor.methods\n      .getNumTweets(address)\n      .call();\n    this.setState({ numTweets: numTweets });\n  };\n\n  fetchNumberOfReplies = async address => {\n    const batch = [];\n    for (let i = 0; i < this.state.numTweets; i++) {\n      batch.push(\n        this.props.drizzle.contracts.Twittor.methods\n          .getNumReplies(address, i)\n          .call()\n      );\n    }\n\n    const numReplies = await Promise.all(batch);\n    const numRepliesTotal = numReplies.reduce((acc, curr) => acc + +curr, 0);\n    this.setState({ numReplies: numRepliesTotal });\n  };\n\n  fetchNumberOfFollowing = async address => {\n    let count = 0;\n    let currFollowing;\n    try {\n      currFollowing = await this.props.drizzle.contracts.Twittor.methods\n        .viewFollowing(address, count)\n        .call();\n    } catch (error) {\n      console.log(error.message, 'ERROR');\n    }\n    console.log(currFollowing);\n    // do {\n    //   currFollowing = await this.props.drizzle.contracts.Twittor.methods.viewFollowing(\n    //     address,\n    //     count\n    //   );\n    //   count++;\n    // } while (currFollowing);\n\n    // this.setState({ following: count });\n  };\n\n  async componentDidMount() {\n    if (!this.state.userAddress) {\n      const accounts = await this.props.drizzle.web3.eth.getAccounts();\n      this.setState({ userAddress: accounts[0] });\n    }\n    const { userAddress } = this.state;\n    await this.fetchNumberOfTweets(userAddress);\n    await this.fetchNumberOfReplies(userAddress);\n    // await this.fetchNumberOfFollowing(userAddress);\n    this.setState({ loading: false });\n  }\n\n  populateData = () => {\n    return [\n      { key: 'numTweets', label: 'Tweets', value: `${this.state.numTweets}` },\n      {\n        key: 'numReplies',\n        label: 'Replies',\n        value: `${this.state.numReplies}`,\n      },\n      {\n        key: 'following',\n        label: 'Following',\n        value: `${this.state.following}`,\n      },\n      {\n        key: 'followers',\n        label: 'Followers',\n        value: `${this.state.followers}`,\n      },\n    ];\n  };\n\n  render() {\n    return (\n      <div\n        style={{\n          display: 'flex',\n          alignItems: 'center',\n          flexDirection: 'column',\n        }}\n      >\n        <h1>User Page</h1>\n        <h3>Address: {this.state.userAddress}</h3>\n\n        <div>\n          <Statistic.Group items={this.populateData()} />\n        </div>\n\n        <Loader size=\"massive\" active={this.state.loading} inline>\n          Loading\n        </Loader>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}