{"ast":null,"code":"var _jsxFileName = \"/Users/AlexMok/drizzletest/Twittor/App/src/MyComponent.js\";\nimport React from 'react';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { ContractData, ContractForm } from 'drizzle-react-components';\nimport TweetForm from './TweetForm';\nimport SingleTweet from './SingleTweet';\nimport { Drizzle } from 'drizzle';\nimport options from './drizzleOptions';\nimport { DrizzleContext } from 'drizzle-react'; // const drizzle = new Drizzle(options);\n\nexport default class tweets extends React.Component {\n  constructor(props, context) {\n    super(props);\n\n    this.handleInputChange = event => {\n      this.setState({\n        tweet: event.target.value,\n        hashT: this.findHashTag(event.target.value)\n      }); // console.log(this.state);\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault();\n      console.log(this.state, 'WHAT IS BEING SUBMITTED');\n      await this.props.drizzle.contracts.Twittor.methods.addTweetStruct(this.state.tweet, this.state.hashT).send({\n        from: this.state.userAddress\n      }); //  this.forceUpdate();\n      //const numTweets = await this.props.drizzle.contracts.Twittor.methods.getNumTweets(this.state.userAddress).call();\n      //this.setState({numTweets });\n    };\n\n    this.getTweet = async index => {\n      console.log('props ', this.props);\n      const result = await this.props.drizzle.contracts.Twittor.methods.getEverythingTweetStruct(this.state.userAddress, index).call();\n      return result[0];\n    };\n\n    this.getNum = async index => {\n      // console.log('props ', this.props);\n      const numTweets = await this.props.drizzle.contracts.Twittor.methods.getNumTweets(this.state.userAddress).call();\n      this.setState({\n        numTweets\n      }); // console.log('numTweets', numTweets);\n\n      this.forceUpdate();\n    };\n\n    this.drizzleState = context.drizzle; // this.contractInstance = context.drizzle.contracts.Twittor\n\n    this.state = {\n      userAddress: '',\n      tweet: '',\n      hashT: '',\n      numTweets: 0,\n      dataKey: null\n    };\n  }\n\n  async componentDidMount() {\n    // console.log(\"drizzle \", drizzle)\n    const drizzle = this.props.drizzle;\n    const accounts = await this.props.drizzle.web3.eth.getAccounts(); // const numTweets = await this.props.drizzle.contracts.Twittor.methods.getNumTweets(accounts[0]).call();\n    // Initializes getNumTweets of store state\n    // getNumTweets is initially an empty object so this call sets it to however\n    // many tweets the current address passed to it has\n\n    drizzle.contracts.Twittor.methods.getNumTweets.cacheCall(accounts[0]); // let numTweets = 0;\n    // console.log(\"numTweets \", numTweets)\n\n    this.setState({\n      userAddress: accounts[0]\n    }); // const contract = ;\n    // drizzle.contracts.Twittor.methods.getNumTweets.cacheCall(accounts[0])\n    // this.setState({dataKey});\n    // console.log(\"KEY \", dataKey)\n  }\n\n  findHashTag(str) {\n    const hashTIndex = str.indexOf('#');\n    let endOfHashT = str.indexOf(' ', hashTIndex);\n    if (endOfHashT === -1) endOfHashT = str.length;\n    const hashT = str.slice(hashTIndex, endOfHashT);\n    return hashT || '';\n  }\n\n  render() {\n    const drizzleState = this.props.drizzleState;\n    let length = 0;\n    const key = Object.keys(drizzleState.contracts.Twittor.getNumTweets)[0]; //if getNumTweets has been initialized then set length to equal getNumTweets\n\n    if (drizzleState.contracts.Twittor.getNumTweets[key]) {\n      length = drizzleState.contracts.Twittor.getNumTweets[key].value;\n    } // const getNumTweetsFirstKey = Object.keys(\n    //   this.props.drizzleState.contracts.Twittor.getNumTweets\n    // )[1];\n    // if (this.props.drizzleState.contracts.Twittor.getNumTweets[getNumTweetsFirstKey]) {\n    //   length = this.props.drizzleState.contracts.Twittor.getNumTweets[getNumTweetsFirstKey].value;\n    // }\n\n\n    let mapArray = [];\n\n    if (length) {\n      mapArray.length = length;\n      mapArray.fill(1);\n    } // console.log(\"props\", this.props)\n    // console.log(\"drizzleState>>>>\", this.props.drizzle.store.getState())\n    // console.log(\"contractInstance>>>>>\", this.contractInstance)\n\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(ToastContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, length, \" \"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.getTweet,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"GET TWEET\"), React.createElement(\"button\", {\n      onClick: this.getNum,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"GET Numtweets\"), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"TWEETS\"), React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      key: \"tweet\",\n      name: \"tweet\",\n      value: this.state.tweet,\n      placeholder: \"tweet\",\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"TWEET\")), React.createElement(\"div\", {\n      className: \"allTweets\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, mapArray.map((tweet, idx) => {\n      return React.createElement(SingleTweet, {\n        address: this.state.userAddress,\n        index: idx,\n        key: idx,\n        drizzle: this.props.drizzle // drizzleState={drizzleState}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      });\n    }).reverse()), React.createElement(\"div\", {\n      className: \"hide\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/AlexMok/drizzletest/Twittor/App/src/MyComponent.js"],"names":["React","ToastContainer","ContractData","ContractForm","TweetForm","SingleTweet","Drizzle","options","DrizzleContext","tweets","Component","constructor","props","context","handleInputChange","event","setState","tweet","target","value","hashT","findHashTag","handleSubmit","preventDefault","console","log","state","drizzle","contracts","Twittor","methods","addTweetStruct","send","from","userAddress","getTweet","index","result","getEverythingTweetStruct","call","getNum","numTweets","getNumTweets","forceUpdate","drizzleState","dataKey","componentDidMount","accounts","web3","eth","getAccounts","cacheCall","str","hashTIndex","indexOf","endOfHashT","length","slice","render","key","Object","keys","mapArray","fill","map","idx","reverse"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { ContractData, ContractForm } from 'drizzle-react-components';\nimport TweetForm from './TweetForm';\nimport SingleTweet from './SingleTweet';\nimport { Drizzle } from 'drizzle';\nimport options from './drizzleOptions';\nimport { DrizzleContext } from 'drizzle-react';\n\n// const drizzle = new Drizzle(options);\nexport default class tweets extends React.Component {\n  constructor(props, context) {\n    super(props);\n    this.drizzleState = context.drizzle;\n    // this.contractInstance = context.drizzle.contracts.Twittor\n    this.state = {\n      userAddress: '',\n      tweet: '',\n      hashT: '',\n      numTweets: 0,\n      dataKey: null,\n    };\n  }\n  async componentDidMount() {\n    // console.log(\"drizzle \", drizzle)\n    const { drizzle } = this.props;\n\n    const accounts = await this.props.drizzle.web3.eth.getAccounts();\n    // const numTweets = await this.props.drizzle.contracts.Twittor.methods.getNumTweets(accounts[0]).call();\n\n    // Initializes getNumTweets of store state\n    // getNumTweets is initially an empty object so this call sets it to however\n    // many tweets the current address passed to it has\n    drizzle.contracts.Twittor.methods.getNumTweets.cacheCall(accounts[0]);\n\n    // let numTweets = 0;\n\n    // console.log(\"numTweets \", numTweets)\n    this.setState({ userAddress: accounts[0] });\n    // const contract = ;\n\n    // drizzle.contracts.Twittor.methods.getNumTweets.cacheCall(accounts[0])\n    // this.setState({dataKey});\n\n    // console.log(\"KEY \", dataKey)\n  }\n\n  handleInputChange = event => {\n    this.setState({\n      tweet: event.target.value,\n      hashT: this.findHashTag(event.target.value),\n    });\n    // console.log(this.state);\n  };\n\n  handleSubmit = async event => {\n    event.preventDefault();\n    console.log(this.state, 'WHAT IS BEING SUBMITTED');\n    await this.props.drizzle.contracts.Twittor.methods\n      .addTweetStruct(this.state.tweet, this.state.hashT)\n      .send({ from: this.state.userAddress });\n\n    //  this.forceUpdate();\n    //const numTweets = await this.props.drizzle.contracts.Twittor.methods.getNumTweets(this.state.userAddress).call();\n    //this.setState({numTweets });\n  };\n\n  getTweet = async index => {\n    console.log('props ', this.props);\n    const result = await this.props.drizzle.contracts.Twittor.methods\n      .getEverythingTweetStruct(this.state.userAddress, index)\n      .call();\n\n    return result[0];\n  };\n\n  getNum = async index => {\n    // console.log('props ', this.props);\n    const numTweets = await this.props.drizzle.contracts.Twittor.methods\n      .getNumTweets(this.state.userAddress)\n      .call();\n    this.setState({ numTweets });\n    // console.log('numTweets', numTweets);\n    this.forceUpdate();\n  };\n\n  findHashTag(str) {\n    const hashTIndex = str.indexOf('#');\n    let endOfHashT = str.indexOf(' ', hashTIndex);\n    if (endOfHashT === -1) endOfHashT = str.length;\n    const hashT = str.slice(hashTIndex, endOfHashT);\n    return hashT || '';\n  }\n\n  render() {\n    const { drizzleState } = this.props;\n    let length = 0;\n\n    const key = Object.keys(drizzleState.contracts.Twittor.getNumTweets)[0];\n    //if getNumTweets has been initialized then set length to equal getNumTweets\n    if (drizzleState.contracts.Twittor.getNumTweets[key]) {\n      length = drizzleState.contracts.Twittor.getNumTweets[key].value;\n    }\n\n    // const getNumTweetsFirstKey = Object.keys(\n    //   this.props.drizzleState.contracts.Twittor.getNumTweets\n    // )[1];\n    // if (this.props.drizzleState.contracts.Twittor.getNumTweets[getNumTweetsFirstKey]) {\n    //   length = this.props.drizzleState.contracts.Twittor.getNumTweets[getNumTweetsFirstKey].value;\n    // }\n    let mapArray = [];\n    if (length) {\n      mapArray.length = length;\n      mapArray.fill(1);\n    }\n\n    // console.log(\"props\", this.props)\n    // console.log(\"drizzleState>>>>\", this.props.drizzle.store.getState())\n    // console.log(\"contractInstance>>>>>\", this.contractInstance)\n    return (\n      <div className=\"App\">\n        <ToastContainer />\n        {<h1>{length} </h1>}\n        <div>\n          <button onClick={this.getTweet}>GET TWEET</button>\n          <button onClick={this.getNum}>GET Numtweets</button>\n\n          <h1>TWEETS</h1>\n          <form onSubmit={this.handleSubmit}>\n            <input\n              key=\"tweet\"\n              name=\"tweet\"\n              value={this.state.tweet}\n              placeholder=\"tweet\"\n              onChange={this.handleInputChange}\n            />\n            <button type=\"submit\">TWEET</button>\n          </form>\n          {/* <TweetForm contract=\"Twittor\" method=\"addTweetStruct\" store = {this.props.drizzle}/> */}\n          <div className=\"allTweets\">\n            {mapArray\n              .map((tweet, idx) => {\n                return (\n                  <SingleTweet\n                    address={this.state.userAddress}\n                    index={idx}\n                    key={idx}\n                    drizzle={this.props.drizzle}\n                    // drizzleState={drizzleState}\n                  />\n                );\n              })\n              .reverse()}\n          </div>\n          <div className=\"hide\">\n            {/* {\n              <ContractData\n                contract=\"Twittor\"\n                method=\"getNumTweets\"\n                methodArgs={[this.state.userAddress]}\n              />\n            } */}\n          </div>\n\n          {/* (\n  <DrizzleContext.Consumer>\n    {drizzleContext => {\n      const { drizzle, drizzleState, initialized } = drizzleContext;\n\n      if (!initialized) {\n        return \"Loading...\";\n      }\n\n      return (\n      <div>\n      <TweetForm drizzle = {drizzle} drizzleState = {drizzleState} />\n      </div>\n\n      );\n    }}\n  </DrizzleContext.Consumer>\n) */}\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}