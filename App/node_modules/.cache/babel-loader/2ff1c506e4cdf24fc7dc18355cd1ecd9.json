{"ast":null,"code":"var _jsxFileName = \"/Users/AlexMok/drizzletest/Twittor/App/src/MyComponent.js\";\nimport React from 'react';\nimport { toast, Flip } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport SingleTweet from './SingleTweet';\nexport default class tweets extends React.Component {\n  constructor(props, context) {\n    super(props);\n\n    this.handleInputChange = event => {\n      this.setState({\n        tweet: event.target.value,\n        hashT: this.findHashTag(event.target.value)\n      });\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault(); // console.log(this.state, 'WHAT IS BEING SUBMITTED');\n\n      toast.info('Processing tweet...', {\n        position: 'top-right',\n        autoClose: 10000,\n        transition: Flip\n      });\n      await this.props.drizzle.contracts.Twittor.methods.addTweetStruct(this.state.tweet, this.state.hashT).send({\n        from: this.state.userAddress\n      });\n    };\n\n    this.getTweet = async index => {\n      console.log('props ', this.props);\n      const result = await this.props.drizzle.contracts.Twittor.methods.getEverythingTweetStruct(this.state.userAddress, index).call();\n      return result[0];\n    };\n\n    this.getNum = async index => {\n      const numTweets = await this.props.drizzle.contracts.Twittor.methods.getNumTweets(this.state.userAddress).call();\n      this.setState({\n        numTweets\n      });\n      this.forceUpdate();\n    };\n\n    this.drizzleState = context.drizzle;\n    this.state = {\n      userAddress: '',\n      tweet: '',\n      hashT: '',\n      numTweets: 0,\n      dataKey: null\n    };\n  }\n\n  async componentDidMount() {\n    const drizzle = this.props.drizzle;\n    const accounts = await this.props.drizzle.web3.eth.getAccounts(); // Initializes getNumTweets of store state\n    // getNumTweets is initially an empty object so this call sets it to however\n    // many tweets the current address passed to it has\n\n    drizzle.contracts.Twittor.methods.getNumTweets.cacheCall(accounts[0]);\n    this.setState({\n      userAddress: accounts[0]\n    });\n  }\n\n  findHashTag(str) {\n    const hashTIndex = str.indexOf('#');\n    let hashT = '';\n\n    if (hashTIndex !== -1) {\n      let endOfHashT = str.indexOf(' ', hashTIndex);\n      if (endOfHashT === -1) endOfHashT = str.length;\n      hashT = str.slice(hashTIndex, endOfHashT);\n    }\n\n    return hashT || '';\n  }\n\n  render() {\n    const drizzleState = this.props.drizzleState;\n    let length = 0;\n    const key = Object.keys(drizzleState.contracts.Twittor.getNumTweets)[0]; //if getNumTweets has been initialized then set length to equal getNumTweets\n\n    if (drizzleState.contracts.Twittor.getNumTweets[key]) {\n      length = drizzleState.contracts.Twittor.getNumTweets[key].value;\n    }\n\n    let mapArray = [];\n\n    if (length) {\n      mapArray.length = length;\n      mapArray.fill(1);\n    } // console.log(\"props\", this.props)\n    // console.log(\"drizzleState>>>>\", this.props.drizzle.store.getState())\n    // console.log(\"contractInstance>>>>>\", this.contractInstance)\n\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(ToastContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, length, \" \"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.getTweet,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"GET TWEET\"), React.createElement(\"button\", {\n      onClick: this.getNum,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"GET Numtweets\"), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"TWEETS\"), React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      key: \"tweet\",\n      name: \"tweet\",\n      value: this.state.tweet,\n      placeholder: \"tweet\",\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"TWEET\")), React.createElement(\"div\", {\n      className: \"allTweets\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, mapArray.map((tweet, idx) => {\n      return React.createElement(SingleTweet, {\n        address: this.state.userAddress,\n        index: idx,\n        key: idx,\n        drizzle: this.props.drizzle,\n        drizzleState: drizzleState,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      });\n    }).reverse())));\n  }\n\n}","map":{"version":3,"sources":["/Users/AlexMok/drizzletest/Twittor/App/src/MyComponent.js"],"names":["React","toast","Flip","SingleTweet","tweets","Component","constructor","props","context","handleInputChange","event","setState","tweet","target","value","hashT","findHashTag","handleSubmit","preventDefault","info","position","autoClose","transition","drizzle","contracts","Twittor","methods","addTweetStruct","state","send","from","userAddress","getTweet","index","console","log","result","getEverythingTweetStruct","call","getNum","numTweets","getNumTweets","forceUpdate","drizzleState","dataKey","componentDidMount","accounts","web3","eth","getAccounts","cacheCall","str","hashTIndex","indexOf","endOfHashT","length","slice","render","key","Object","keys","mapArray","fill","map","idx","reverse"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { toast, Flip } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport SingleTweet from './SingleTweet';\n\nexport default class tweets extends React.Component {\n  constructor(props, context) {\n    super(props);\n    this.drizzleState = context.drizzle;\n    this.state = {\n      userAddress: '',\n      tweet: '',\n      hashT: '',\n      numTweets: 0,\n      dataKey: null,\n    };\n  }\n  async componentDidMount() {\n    const { drizzle } = this.props;\n    const accounts = await this.props.drizzle.web3.eth.getAccounts();\n\n    // Initializes getNumTweets of store state\n    // getNumTweets is initially an empty object so this call sets it to however\n    // many tweets the current address passed to it has\n    drizzle.contracts.Twittor.methods.getNumTweets.cacheCall(accounts[0]);\n    this.setState({ userAddress: accounts[0] });\n  }\n\n  handleInputChange = event => {\n    this.setState({\n      tweet: event.target.value,\n      hashT: this.findHashTag(event.target.value),\n    });\n  };\n\n  handleSubmit = async event => {\n    event.preventDefault();\n\n    // console.log(this.state, 'WHAT IS BEING SUBMITTED');\n\n    toast.info('Processing tweet...', {\n      position: 'top-right',\n      autoClose: 10000,\n      transition: Flip,\n    });\n    await this.props.drizzle.contracts.Twittor.methods\n      .addTweetStruct(this.state.tweet, this.state.hashT)\n      .send({ from: this.state.userAddress });\n  };\n\n  getTweet = async index => {\n    console.log('props ', this.props);\n    const result = await this.props.drizzle.contracts.Twittor.methods\n      .getEverythingTweetStruct(this.state.userAddress, index)\n      .call();\n\n    return result[0];\n  };\n\n  getNum = async index => {\n    const numTweets = await this.props.drizzle.contracts.Twittor.methods\n      .getNumTweets(this.state.userAddress)\n      .call();\n    this.setState({ numTweets });\n    this.forceUpdate();\n  };\n\n  findHashTag(str) {\n    const hashTIndex = str.indexOf('#');\n    let hashT = '';\n\n    if (hashTIndex !== -1) {\n      let endOfHashT = str.indexOf(' ', hashTIndex);\n      if (endOfHashT === -1) endOfHashT = str.length;\n      hashT = str.slice(hashTIndex, endOfHashT);\n    }\n    return hashT || '';\n  }\n\n  render() {\n    const { drizzleState } = this.props;\n    let length = 0;\n\n    const key = Object.keys(drizzleState.contracts.Twittor.getNumTweets)[0];\n    //if getNumTweets has been initialized then set length to equal getNumTweets\n    if (drizzleState.contracts.Twittor.getNumTweets[key]) {\n      length = drizzleState.contracts.Twittor.getNumTweets[key].value;\n    }\n\n    let mapArray = [];\n    if (length) {\n      mapArray.length = length;\n      mapArray.fill(1);\n    }\n\n    // console.log(\"props\", this.props)\n    // console.log(\"drizzleState>>>>\", this.props.drizzle.store.getState())\n    // console.log(\"contractInstance>>>>>\", this.contractInstance)\n    return (\n      <div className=\"App\">\n        <ToastContainer />\n        {<h1>{length} </h1>}\n        <div>\n          <button onClick={this.getTweet}>GET TWEET</button>\n          <button onClick={this.getNum}>GET Numtweets</button>\n\n          <h1>TWEETS</h1>\n          <form onSubmit={this.handleSubmit}>\n            <input\n              key=\"tweet\"\n              name=\"tweet\"\n              value={this.state.tweet}\n              placeholder=\"tweet\"\n              onChange={this.handleInputChange}\n            />\n            <button type=\"submit\">TWEET</button>\n          </form>\n          <div className=\"allTweets\">\n            {mapArray\n              .map((tweet, idx) => {\n                return (\n                  <SingleTweet\n                    address={this.state.userAddress}\n                    index={idx}\n                    key={idx}\n                    drizzle={this.props.drizzle}\n                    drizzleState={drizzleState}\n                  />\n                );\n              })\n              .reverse()}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}