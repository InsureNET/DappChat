{"ast":null,"code":"var _jsxFileName = \"/Users/AlexMok/drizzletest/Twittor/App/src/SingleTweet.js\";\nimport React from 'react';\nimport { Drizzle } from 'drizzle';\nimport options from './drizzleOptions';\nimport ReplyTweet from './ReplyTweet';\nconst drizzle = new Drizzle(options);\nexport default class SingleTweet extends React.Component {\n  constructor(props) {\n    super();\n\n    this.getData = async (address, index) => {\n      const result = await drizzle.contracts.Twittor.methods.getEverythingTweetStruct(address, index).call();\n      return result;\n    };\n\n    this.getReplyNum = async () => {\n      // console.log('props ', this.props);\n      const numReplies = await this.props.drizzle.contracts.Twittor.methods.getNumReplies(this.state.userAddress, this.props.index).call();\n      console.log(numReplies, 'NUM REPLIES');\n      this.setState({\n        numReplies\n      }); // console.log('numTweets', numTweets);\n\n      this.forceUpdate();\n    };\n\n    this.handleInputChange = event => {\n      this.setState({\n        tweet: event.target.value,\n        hashT: this.findHashTag(event.target.value)\n      }); // console.log(this.state);\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault();\n      console.log(this.state, 'WHAT IS BEING SUBMITTED');\n      await this.props.drizzle.contracts.Twittor.methods.addReply(this.state.address, this.state.index).send({\n        from: this.state.address\n      });\n    };\n\n    this.state = {};\n  }\n\n  async componentDidMount() {\n    const tweetData = await this.getData(this.props.address, this.props.index);\n    const drizzle = this.props.drizzle;\n    const accounts = await drizzle.web3.eth.getAccounts();\n    console.log(drizzle.contracts.Twittor.methods, 'METHODS');\n    console.log(this.props.index, 'INDEX');\n    const numR = await this.props.drizzle.contracts.Twittor.methods.getNumTweets(this.state.address).call();\n    console.log(numR, 'NUMR');\n    this.setState(tweetData);\n  }\n\n  render() {\n    const drizzleState = this.props.drizzleState;\n    let length = 0; // console.log(drizzleState.contracts.Twittor, 'REPLY');\n    // const key = Object.keys(drizzleState.contracts.Twittor.getNumReplies)[0];\n    // if (drizzleState.contracts.Twittor.Replies[key]) {\n    //   length = drizzleState.contracts.Twittor.getNumReplies[key].value;\n    // }\n\n    let mapArray = [];\n\n    if (length) {\n      mapArray.length = length;\n      mapArray.fill(1);\n    } // console.log(this.props.drizzle);\n\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"Single\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"Address: \", this.props.address), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"Block Num: \", this.state[2]), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Replies: \", this.state[3]), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: () => this.setState({\n        displayReply: !this.state.displayReply\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"Reply\"), this.state.displayReply ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      key: \"reply\",\n      name: \"reply\",\n      value: this.state.reply,\n      placeholder: \"reply\",\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"TWEET\")), length ? mapArray.map((tweet, idx) => {\n      return React.createElement(ReplyTweet, {\n        address: this.props.address,\n        index: this.props.index,\n        replyIndex: idx,\n        key: idx,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      });\n    }).reverse() : React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Length is false\")) : React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"False\")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"Tweet: \", this.state[0]));\n  }\n\n}","map":{"version":3,"sources":["/Users/AlexMok/drizzletest/Twittor/App/src/SingleTweet.js"],"names":["React","Drizzle","options","ReplyTweet","drizzle","SingleTweet","Component","constructor","props","getData","address","index","result","contracts","Twittor","methods","getEverythingTweetStruct","call","getReplyNum","numReplies","getNumReplies","state","userAddress","console","log","setState","forceUpdate","handleInputChange","event","tweet","target","value","hashT","findHashTag","handleSubmit","preventDefault","addReply","send","from","componentDidMount","tweetData","accounts","web3","eth","getAccounts","numR","getNumTweets","render","drizzleState","length","mapArray","fill","displayReply","reply","map","idx","reverse"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Drizzle } from 'drizzle';\nimport options from './drizzleOptions';\nimport ReplyTweet from './ReplyTweet';\n\nconst drizzle = new Drizzle(options);\n\nexport default class SingleTweet extends React.Component {\n  constructor(props) {\n    super();\n\n    this.state = {};\n  }\n  async componentDidMount() {\n    const tweetData = await this.getData(this.props.address, this.props.index);\n\n    const { drizzle } = this.props;\n\n    const accounts = await drizzle.web3.eth.getAccounts();\n    console.log(drizzle.contracts.Twittor.methods, 'METHODS');\n    console.log(this.props.index, 'INDEX');\n    const numR = await this.props.drizzle.contracts.Twittor.methods\n      .getNumTweets(this.state.address)\n      .call();\n    console.log(numR, 'NUMR');\n    this.setState(tweetData);\n  }\n\n  getData = async (address, index) => {\n    const result = await drizzle.contracts.Twittor.methods\n      .getEverythingTweetStruct(address, index)\n      .call();\n    return result;\n  };\n\n  getReplyNum = async () => {\n    // console.log('props ', this.props);\n    const numReplies = await this.props.drizzle.contracts.Twittor.methods\n      .getNumReplies(this.state.userAddress, this.props.index)\n      .call();\n\n    console.log(numReplies, 'NUM REPLIES');\n    this.setState({ numReplies });\n    // console.log('numTweets', numTweets);\n    this.forceUpdate();\n  };\n\n  handleInputChange = event => {\n    this.setState({\n      tweet: event.target.value,\n      hashT: this.findHashTag(event.target.value),\n    });\n    // console.log(this.state);\n  };\n\n  handleSubmit = async event => {\n    event.preventDefault();\n    console.log(this.state, 'WHAT IS BEING SUBMITTED');\n    await this.props.drizzle.contracts.Twittor.methods\n      .addReply(this.state.address, this.state.index)\n      .send({ from: this.state.address });\n  };\n\n  render() {\n    const { drizzleState } = this.props;\n    let length = 0;\n\n    // console.log(drizzleState.contracts.Twittor, 'REPLY');\n    // const key = Object.keys(drizzleState.contracts.Twittor.getNumReplies)[0];\n\n    // if (drizzleState.contracts.Twittor.Replies[key]) {\n    //   length = drizzleState.contracts.Twittor.getNumReplies[key].value;\n    // }\n\n    let mapArray = [];\n    if (length) {\n      mapArray.length = length;\n      mapArray.fill(1);\n    }\n\n    // console.log(this.props.drizzle);\n    return (\n      <div>\n        <h1>Single</h1>\n        <p>Address: {this.props.address}</p>\n        <p>Block Num: {this.state[2]}</p>\n        <p>Replies: {this.state[3]}</p>\n        {/* <p>Replies Count: {this.getReplyNum}</p> */}\n\n        <div>\n          <button\n            onClick={() =>\n              this.setState({ displayReply: !this.state.displayReply })\n            }\n          >\n            Reply\n          </button>\n          {this.state.displayReply ? (\n            <div>\n              <form onSubmit={this.handleSubmit}>\n                <input\n                  key=\"reply\"\n                  name=\"reply\"\n                  value={this.state.reply}\n                  placeholder=\"reply\"\n                  onChange={this.handleInputChange}\n                />\n                <button type=\"submit\">TWEET</button>\n              </form>\n              {length ? (\n                mapArray\n                  .map((tweet, idx) => {\n                    return (\n                      <ReplyTweet\n                        address={this.props.address}\n                        index={this.props.index}\n                        replyIndex={idx}\n                        key={idx}\n                      />\n                    );\n                  })\n                  .reverse()\n              ) : (\n                <h2>Length is false</h2>\n              )}\n            </div>\n          ) : (\n            <h1>False</h1>\n          )}\n        </div>\n\n        <p>Tweet: {this.state[0]}</p>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}