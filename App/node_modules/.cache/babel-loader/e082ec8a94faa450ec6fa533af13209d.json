{"ast":null,"code":"var _jsxFileName = \"/Users/AlexMok/drizzletest/Twittor/App/src/SingleTweet.js\";\nimport React from 'react';\nimport ReplyTweet from './ReplyTweet';\nexport default class SingleTweet extends React.Component {\n  constructor(props) {\n    super();\n\n    this.getData = async (address, index) => {\n      const result = await this.props.drizzle.contracts.Twittor.methods.getEverythingTweetStruct(address, index).call();\n      return result;\n    };\n\n    this.handleInputChange = event => {\n      this.setState({\n        reply: event.target.value\n      });\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault();\n      await this.props.drizzle.contracts.Twittor.methods.addReply(this.props.address, this.props.index, this.state.reply).send({\n        from: this.props.address\n      });\n    };\n\n    this.state = {\n      reply: ''\n    };\n  }\n\n  async componentDidMount() {\n    await this.props.drizzle.contracts.Twittor.methods.getNumReplies.cacheCall(this.props.address, this.props.index);\n    const tweetData = await this.getData(this.props.address, this.props.index);\n    this.setState(tweetData);\n  }\n\n  render() {\n    const drizzleState = this.props.drizzleState;\n    let length = 0;\n    let identifier; //Gets list of all single tweet keys\n\n    const keys = Object.keys(drizzleState.contracts.Twittor.getNumReplies); //Searches through the getNumReply arguments, matches the index, and saves indentifier\n\n    if (keys.length) {\n      for (let i = 0; i < keys.length; i++) {\n        if (drizzleState.contracts.Twittor.getNumReplies[keys[i]].args[1] === this.props.index) {\n          identifier = keys[i];\n          break;\n        }\n      } //Finds the newly updated num replies\n\n\n      if (identifier) {\n        length = drizzleState.contracts.Twittor.getNumReplies[identifier].value;\n      }\n    }\n\n    let mapArray = [];\n\n    if (length) {\n      mapArray.length = length;\n      mapArray.fill(1);\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Single\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Address: \", this.props.address), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Block Num: \", this.state[2]), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Replies: \", length), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: () => this.setState({\n        displayReply: !this.state.displayReply\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Replies\"), this.state.displayReply ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      key: \"reply\",\n      name: \"reply\",\n      value: this.state.reply,\n      placeholder: \"reply\",\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"Reply\")), React.createElement(\"div\", {\n      style: {\n        border: 'solid'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, mapArray.length === 0 ? mapArray.map((tweet, idx) => {\n      return React.createElement(ReplyTweet, {\n        address: this.props.address,\n        index: this.props.index,\n        replyIndex: idx,\n        key: idx,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      });\n    }).reverse() : React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"No replies yet\"))) : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"Tweet: \", this.state[0]));\n  }\n\n}","map":{"version":3,"sources":["/Users/AlexMok/drizzletest/Twittor/App/src/SingleTweet.js"],"names":["React","ReplyTweet","SingleTweet","Component","constructor","props","getData","address","index","result","drizzle","contracts","Twittor","methods","getEverythingTweetStruct","call","handleInputChange","event","setState","reply","target","value","handleSubmit","preventDefault","addReply","state","send","from","componentDidMount","getNumReplies","cacheCall","tweetData","render","drizzleState","length","identifier","keys","Object","i","args","mapArray","fill","displayReply","border","map","tweet","idx","reverse"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAEA,eAAe,MAAMC,WAAN,SAA0BF,KAAK,CAACG,SAAhC,CAA0C;AACvDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB;;AADiB,SAenBC,OAfmB,GAeT,OAAOC,OAAP,EAAgBC,KAAhB,KAA0B;AAClC,YAAMC,MAAM,GAAG,MAAM,KAAKJ,KAAL,CAAWK,OAAX,CAAmBC,SAAnB,CAA6BC,OAA7B,CAAqCC,OAArC,CAClBC,wBADkB,CACOP,OADP,EACgBC,KADhB,EAElBO,IAFkB,EAArB;AAGA,aAAON,MAAP;AACD,KApBkB;;AAAA,SAsBnBO,iBAtBmB,GAsBCC,KAAK,IAAI;AAC3B,WAAKC,QAAL,CAAc;AACZC,QAAAA,KAAK,EAAEF,KAAK,CAACG,MAAN,CAAaC;AADR,OAAd;AAGD,KA1BkB;;AAAA,SA4BnBC,YA5BmB,GA4BJ,MAAML,KAAN,IAAe;AAC5BA,MAAAA,KAAK,CAACM,cAAN;AACA,YAAM,KAAKlB,KAAL,CAAWK,OAAX,CAAmBC,SAAnB,CAA6BC,OAA7B,CAAqCC,OAArC,CACHW,QADG,CACM,KAAKnB,KAAL,CAAWE,OADjB,EAC0B,KAAKF,KAAL,CAAWG,KADrC,EAC4C,KAAKiB,KAAL,CAAWN,KADvD,EAEHO,IAFG,CAEE;AAAEC,QAAAA,IAAI,EAAE,KAAKtB,KAAL,CAAWE;AAAnB,OAFF,CAAN;AAGD,KAjCkB;;AAGjB,SAAKkB,KAAL,GAAa;AAAEN,MAAAA,KAAK,EAAE;AAAT,KAAb;AACD;;AACD,QAAMS,iBAAN,GAA0B;AACxB,UAAM,KAAKvB,KAAL,CAAWK,OAAX,CAAmBC,SAAnB,CAA6BC,OAA7B,CAAqCC,OAArC,CAA6CgB,aAA7C,CAA2DC,SAA3D,CACJ,KAAKzB,KAAL,CAAWE,OADP,EAEJ,KAAKF,KAAL,CAAWG,KAFP,CAAN;AAKA,UAAMuB,SAAS,GAAG,MAAM,KAAKzB,OAAL,CAAa,KAAKD,KAAL,CAAWE,OAAxB,EAAiC,KAAKF,KAAL,CAAWG,KAA5C,CAAxB;AACA,SAAKU,QAAL,CAAca,SAAd;AACD;;AAsBDC,EAAAA,MAAM,GAAG;AAAA,UACCC,YADD,GACkB,KAAK5B,KADvB,CACC4B,YADD;AAEP,QAAIC,MAAM,GAAG,CAAb;AACA,QAAIC,UAAJ,CAHO,CAKP;;AACA,UAAMC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYH,YAAY,CAACtB,SAAb,CAAuBC,OAAvB,CAA+BiB,aAA3C,CAAb,CANO,CAQP;;AACA,QAAIO,IAAI,CAACF,MAAT,EAAiB;AACf,WAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACF,MAAzB,EAAiCI,CAAC,EAAlC,EAAsC;AACpC,YACEL,YAAY,CAACtB,SAAb,CAAuBC,OAAvB,CAA+BiB,aAA/B,CAA6CO,IAAI,CAACE,CAAD,CAAjD,EAAsDC,IAAtD,CAA2D,CAA3D,MACA,KAAKlC,KAAL,CAAWG,KAFb,EAGE;AACA2B,UAAAA,UAAU,GAAGC,IAAI,CAACE,CAAD,CAAjB;AACA;AACD;AACF,OATc,CAWf;;;AACA,UAAIH,UAAJ,EAAgB;AACdD,QAAAA,MAAM,GAAGD,YAAY,CAACtB,SAAb,CAAuBC,OAAvB,CAA+BiB,aAA/B,CAA6CM,UAA7C,EAAyDd,KAAlE;AACD;AACF;;AACD,QAAImB,QAAQ,GAAG,EAAf;;AACA,QAAIN,MAAJ,EAAY;AACVM,MAAAA,QAAQ,CAACN,MAAT,GAAkBA,MAAlB;AACAM,MAAAA,QAAQ,CAACC,IAAT,CAAc,CAAd;AACD;;AAED,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAa,KAAKpC,KAAL,CAAWE,OAAxB,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAe,KAAKkB,KAAL,CAAW,CAAX,CAAf,CAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAaS,MAAb,CAJF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,OAAO,EAAE,MACP,KAAKhB,QAAL,CAAc;AAAEwB,QAAAA,YAAY,EAAE,CAAC,KAAKjB,KAAL,CAAWiB;AAA5B,OAAd,CAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAQG,KAAKjB,KAAL,CAAWiB,YAAX,GACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,QAAQ,EAAE,KAAKpB,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,GAAG,EAAC,OADN;AAEE,MAAA,IAAI,EAAC,OAFP;AAGE,MAAA,KAAK,EAAE,KAAKG,KAAL,CAAWN,KAHpB;AAIE,MAAA,WAAW,EAAC,OAJd;AAKE,MAAA,QAAQ,EAAE,KAAKH,iBALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAQE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eARF,CADF,EAYE;AAAK,MAAA,KAAK,EAAE;AAAE2B,QAAAA,MAAM,EAAE;AAAV,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGH,QAAQ,CAACN,MAAT,KAAoB,CAApB,GACCM,QAAQ,CACLI,GADH,CACO,CAACC,KAAD,EAAQC,GAAR,KAAgB;AACnB,aACE,oBAAC,UAAD;AACE,QAAA,OAAO,EAAE,KAAKzC,KAAL,CAAWE,OADtB;AAEE,QAAA,KAAK,EAAE,KAAKF,KAAL,CAAWG,KAFpB;AAGE,QAAA,UAAU,EAAEsC,GAHd;AAIE,QAAA,GAAG,EAAEA,GAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAQD,KAVH,EAWGC,OAXH,EADD,GAcC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAfJ,CAZF,CADD,GAiCC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAzCJ,CANF,EAmDE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAW,KAAKtB,KAAL,CAAW,CAAX,CAAX,CAnDF,CADF;AAuDD;;AA1HsD","sourcesContent":["import React from 'react';\nimport ReplyTweet from './ReplyTweet';\n\nexport default class SingleTweet extends React.Component {\n  constructor(props) {\n    super();\n\n    this.state = { reply: '' };\n  }\n  async componentDidMount() {\n    await this.props.drizzle.contracts.Twittor.methods.getNumReplies.cacheCall(\n      this.props.address,\n      this.props.index\n    );\n\n    const tweetData = await this.getData(this.props.address, this.props.index);\n    this.setState(tweetData);\n  }\n\n  getData = async (address, index) => {\n    const result = await this.props.drizzle.contracts.Twittor.methods\n      .getEverythingTweetStruct(address, index)\n      .call();\n    return result;\n  };\n\n  handleInputChange = event => {\n    this.setState({\n      reply: event.target.value,\n    });\n  };\n\n  handleSubmit = async event => {\n    event.preventDefault();\n    await this.props.drizzle.contracts.Twittor.methods\n      .addReply(this.props.address, this.props.index, this.state.reply)\n      .send({ from: this.props.address });\n  };\n\n  render() {\n    const { drizzleState } = this.props;\n    let length = 0;\n    let identifier;\n\n    //Gets list of all single tweet keys\n    const keys = Object.keys(drizzleState.contracts.Twittor.getNumReplies);\n\n    //Searches through the getNumReply arguments, matches the index, and saves indentifier\n    if (keys.length) {\n      for (let i = 0; i < keys.length; i++) {\n        if (\n          drizzleState.contracts.Twittor.getNumReplies[keys[i]].args[1] ===\n          this.props.index\n        ) {\n          identifier = keys[i];\n          break;\n        }\n      }\n\n      //Finds the newly updated num replies\n      if (identifier) {\n        length = drizzleState.contracts.Twittor.getNumReplies[identifier].value;\n      }\n    }\n    let mapArray = [];\n    if (length) {\n      mapArray.length = length;\n      mapArray.fill(1);\n    }\n\n    return (\n      <div>\n        <h1>Single</h1>\n        <p>Address: {this.props.address}</p>\n        <p>Block Num: {this.state[2]}</p>\n        <p>Replies: {length}</p>\n\n        <div>\n          <button\n            onClick={() =>\n              this.setState({ displayReply: !this.state.displayReply })\n            }\n          >\n            Replies\n          </button>\n          {this.state.displayReply ? (\n            <div>\n              <form onSubmit={this.handleSubmit}>\n                <input\n                  key=\"reply\"\n                  name=\"reply\"\n                  value={this.state.reply}\n                  placeholder=\"reply\"\n                  onChange={this.handleInputChange}\n                />\n                <button type=\"submit\">Reply</button>\n              </form>\n\n              <div style={{ border: 'solid' }}>\n                {mapArray.length === 0 ? (\n                  mapArray\n                    .map((tweet, idx) => {\n                      return (\n                        <ReplyTweet\n                          address={this.props.address}\n                          index={this.props.index}\n                          replyIndex={idx}\n                          key={idx}\n                        />\n                      );\n                    })\n                    .reverse()\n                ) : (\n                  <h2>No replies yet</h2>\n                )}\n              </div>\n            </div>\n          ) : (\n            <p />\n          )}\n        </div>\n\n        <p>Tweet: {this.state[0]}</p>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}