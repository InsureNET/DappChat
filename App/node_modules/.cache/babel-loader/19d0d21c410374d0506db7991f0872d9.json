{"ast":null,"code":"var _jsxFileName = \"/Users/AlexMok/drizzletest/Twittor/App/src/MyComponent.js\";\nimport React from 'react';\nimport { ToastContainer, toast, Flip } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport SingleTweet from './SingleTweet';\nimport { Button, Form, Message } from 'semantic-ui-react';\nimport UserPage from './UserPage';\nexport default class tweets extends React.Component {\n  constructor(props, context) {\n    super(props);\n\n    this.handleInputChange = event => {\n      this.setState({\n        tweet: event.target.value,\n        hashT: this.findHashTag(event.target.value)\n      });\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault();\n      this.setState({\n        loading: true\n      }); // console.log(this.state, 'WHAT IS BEING SUBMITTED');\n\n      toast.info('Processing tweet...', {\n        position: 'top-right',\n        autoClose: 10000,\n        transition: Flip\n      });\n\n      try {\n        await this.props.drizzle.contracts.Twittor.methods.addTweetStruct(this.state.tweet, this.state.hashT).send({\n          from: this.state.userAddress\n        });\n      } catch (error) {\n        this.setState({\n          errorMessage: error.message\n        });\n        toast.dismiss();\n      }\n\n      this.setState({\n        loading: false\n      });\n    };\n\n    this.getTweet = async index => {\n      const result = await this.props.drizzle.contracts.Twittor.methods.getEverythingTweetStruct(this.state.userAddress, index).call();\n      return result[0];\n    };\n\n    this.getNum = async index => {\n      const numTweets = await this.props.drizzle.contracts.Twittor.methods.getNumTweets(this.state.userAddress).call();\n      this.setState({\n        numTweets\n      });\n      this.forceUpdate();\n    };\n\n    this.drizzleState = context.drizzle;\n    this.state = {\n      userAddress: '',\n      tweet: '',\n      hashT: '',\n      numTweets: 0,\n      dataKey: null,\n      loading: false,\n      errorMessage: ''\n    };\n  }\n\n  async componentDidMount() {\n    const drizzle = this.props.drizzle;\n    const accounts = await this.props.drizzle.web3.eth.getAccounts(); // Initializes getNumTweets of store state\n    // getNumTweets is initially an empty object so this call sets it to however\n    // many tweets the current address passed to it has\n\n    drizzle.contracts.Twittor.methods.getNumTweets.cacheCall(accounts[0]);\n    this.setState({\n      userAddress: accounts[0]\n    });\n  }\n\n  findHashTag(str) {\n    const hashTIndex = str.indexOf('#');\n    let hashT = '';\n\n    if (hashTIndex !== -1) {\n      let endOfHashT = str.indexOf(' ', hashTIndex);\n      if (endOfHashT === -1) endOfHashT = str.length;\n      hashT = str.slice(hashTIndex, endOfHashT);\n    }\n\n    return hashT || '';\n  }\n\n  render() {\n    const drizzleState = this.props.drizzleState;\n    let length = 0;\n    const key = Object.keys(drizzleState.contracts.Twittor.getNumTweets)[0]; //if getNumTweets has been initialized then set length to equal getNumTweets\n\n    if (drizzleState.contracts.Twittor.getNumTweets[key]) {\n      length = drizzleState.contracts.Twittor.getNumTweets[key].value;\n    }\n\n    let mapArray = [];\n\n    if (length) {\n      mapArray.length = length;\n      mapArray.fill(1);\n    } // console.log(\"props\", this.props)\n    // console.log(\"drizzleState>>>>\", this.props.drizzle.store.getState())\n    // console.log(\"contractInstance>>>>>\", this.contractInstance)\n\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(ToastContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }), React.createElement(UserPage, {\n      drizzle: this.props.drizzle,\n      drizzleState: drizzleState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/AlexMok/drizzletest/Twittor/App/src/MyComponent.js"],"names":["React","ToastContainer","toast","Flip","SingleTweet","Button","Form","Message","UserPage","tweets","Component","constructor","props","context","handleInputChange","event","setState","tweet","target","value","hashT","findHashTag","handleSubmit","preventDefault","loading","info","position","autoClose","transition","drizzle","contracts","Twittor","methods","addTweetStruct","state","send","from","userAddress","error","errorMessage","message","dismiss","getTweet","index","result","getEverythingTweetStruct","call","getNum","numTweets","getNumTweets","forceUpdate","drizzleState","dataKey","componentDidMount","accounts","web3","eth","getAccounts","cacheCall","str","hashTIndex","indexOf","endOfHashT","length","slice","render","key","Object","keys","mapArray","fill"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,KAAzB,EAAgCC,IAAhC,QAA4C,gBAA5C;AACA,OAAO,uCAAP;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,OAAvB,QAAsC,mBAAtC;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,eAAe,MAAMC,MAAN,SAAqBT,KAAK,CAACU,SAA3B,CAAqC;AAClDC,EAAAA,WAAW,CAACC,KAAD,EAAQC,OAAR,EAAiB;AAC1B,UAAMD,KAAN;;AAD0B,SAwB5BE,iBAxB4B,GAwBRC,KAAK,IAAI;AAC3B,WAAKC,QAAL,CAAc;AACZC,QAAAA,KAAK,EAAEF,KAAK,CAACG,MAAN,CAAaC,KADR;AAEZC,QAAAA,KAAK,EAAE,KAAKC,WAAL,CAAiBN,KAAK,CAACG,MAAN,CAAaC,KAA9B;AAFK,OAAd;AAID,KA7B2B;;AAAA,SA+B5BG,YA/B4B,GA+Bb,MAAMP,KAAN,IAAe;AAC5BA,MAAAA,KAAK,CAACQ,cAAN;AAEA,WAAKP,QAAL,CAAc;AAAEQ,QAAAA,OAAO,EAAE;AAAX,OAAd,EAH4B,CAI5B;;AAEAtB,MAAAA,KAAK,CAACuB,IAAN,CAAW,qBAAX,EAAkC;AAChCC,QAAAA,QAAQ,EAAE,WADsB;AAEhCC,QAAAA,SAAS,EAAE,KAFqB;AAGhCC,QAAAA,UAAU,EAAEzB;AAHoB,OAAlC;;AAMA,UAAI;AACF,cAAM,KAAKS,KAAL,CAAWiB,OAAX,CAAmBC,SAAnB,CAA6BC,OAA7B,CAAqCC,OAArC,CACHC,cADG,CACY,KAAKC,KAAL,CAAWjB,KADvB,EAC8B,KAAKiB,KAAL,CAAWd,KADzC,EAEHe,IAFG,CAEE;AAAEC,UAAAA,IAAI,EAAE,KAAKF,KAAL,CAAWG;AAAnB,SAFF,CAAN;AAGD,OAJD,CAIE,OAAOC,KAAP,EAAc;AACd,aAAKtB,QAAL,CAAc;AAAEuB,UAAAA,YAAY,EAAED,KAAK,CAACE;AAAtB,SAAd;AACAtC,QAAAA,KAAK,CAACuC,OAAN;AACD;;AAED,WAAKzB,QAAL,CAAc;AAAEQ,QAAAA,OAAO,EAAE;AAAX,OAAd;AACD,KArD2B;;AAAA,SAuD5BkB,QAvD4B,GAuDjB,MAAMC,KAAN,IAAe;AACxB,YAAMC,MAAM,GAAG,MAAM,KAAKhC,KAAL,CAAWiB,OAAX,CAAmBC,SAAnB,CAA6BC,OAA7B,CAAqCC,OAArC,CAClBa,wBADkB,CACO,KAAKX,KAAL,CAAWG,WADlB,EAC+BM,KAD/B,EAElBG,IAFkB,EAArB;AAIA,aAAOF,MAAM,CAAC,CAAD,CAAb;AACD,KA7D2B;;AAAA,SA+D5BG,MA/D4B,GA+DnB,MAAMJ,KAAN,IAAe;AACtB,YAAMK,SAAS,GAAG,MAAM,KAAKpC,KAAL,CAAWiB,OAAX,CAAmBC,SAAnB,CAA6BC,OAA7B,CAAqCC,OAArC,CACrBiB,YADqB,CACR,KAAKf,KAAL,CAAWG,WADH,EAErBS,IAFqB,EAAxB;AAGA,WAAK9B,QAAL,CAAc;AAAEgC,QAAAA;AAAF,OAAd;AACA,WAAKE,WAAL;AACD,KArE2B;;AAE1B,SAAKC,YAAL,GAAoBtC,OAAO,CAACgB,OAA5B;AACA,SAAKK,KAAL,GAAa;AACXG,MAAAA,WAAW,EAAE,EADF;AAEXpB,MAAAA,KAAK,EAAE,EAFI;AAGXG,MAAAA,KAAK,EAAE,EAHI;AAIX4B,MAAAA,SAAS,EAAE,CAJA;AAKXI,MAAAA,OAAO,EAAE,IALE;AAMX5B,MAAAA,OAAO,EAAE,KANE;AAOXe,MAAAA,YAAY,EAAE;AAPH,KAAb;AASD;;AACD,QAAMc,iBAAN,GAA0B;AAAA,UAChBxB,OADgB,GACJ,KAAKjB,KADD,CAChBiB,OADgB;AAExB,UAAMyB,QAAQ,GAAG,MAAM,KAAK1C,KAAL,CAAWiB,OAAX,CAAmB0B,IAAnB,CAAwBC,GAAxB,CAA4BC,WAA5B,EAAvB,CAFwB,CAIxB;AACA;AACA;;AACA5B,IAAAA,OAAO,CAACC,SAAR,CAAkBC,OAAlB,CAA0BC,OAA1B,CAAkCiB,YAAlC,CAA+CS,SAA/C,CAAyDJ,QAAQ,CAAC,CAAD,CAAjE;AACA,SAAKtC,QAAL,CAAc;AAAEqB,MAAAA,WAAW,EAAEiB,QAAQ,CAAC,CAAD;AAAvB,KAAd;AACD;;AAiDDjC,EAAAA,WAAW,CAACsC,GAAD,EAAM;AACf,UAAMC,UAAU,GAAGD,GAAG,CAACE,OAAJ,CAAY,GAAZ,CAAnB;AACA,QAAIzC,KAAK,GAAG,EAAZ;;AAEA,QAAIwC,UAAU,KAAK,CAAC,CAApB,EAAuB;AACrB,UAAIE,UAAU,GAAGH,GAAG,CAACE,OAAJ,CAAY,GAAZ,EAAiBD,UAAjB,CAAjB;AACA,UAAIE,UAAU,KAAK,CAAC,CAApB,EAAuBA,UAAU,GAAGH,GAAG,CAACI,MAAjB;AACvB3C,MAAAA,KAAK,GAAGuC,GAAG,CAACK,KAAJ,CAAUJ,UAAV,EAAsBE,UAAtB,CAAR;AACD;;AACD,WAAO1C,KAAK,IAAI,EAAhB;AACD;;AAED6C,EAAAA,MAAM,GAAG;AAAA,UACCd,YADD,GACkB,KAAKvC,KADvB,CACCuC,YADD;AAEP,QAAIY,MAAM,GAAG,CAAb;AAEA,UAAMG,GAAG,GAAGC,MAAM,CAACC,IAAP,CAAYjB,YAAY,CAACrB,SAAb,CAAuBC,OAAvB,CAA+BkB,YAA3C,EAAyD,CAAzD,CAAZ,CAJO,CAKP;;AACA,QAAIE,YAAY,CAACrB,SAAb,CAAuBC,OAAvB,CAA+BkB,YAA/B,CAA4CiB,GAA5C,CAAJ,EAAsD;AACpDH,MAAAA,MAAM,GAAGZ,YAAY,CAACrB,SAAb,CAAuBC,OAAvB,CAA+BkB,YAA/B,CAA4CiB,GAA5C,EAAiD/C,KAA1D;AACD;;AAED,QAAIkD,QAAQ,GAAG,EAAf;;AACA,QAAIN,MAAJ,EAAY;AACVM,MAAAA,QAAQ,CAACN,MAAT,GAAkBA,MAAlB;AACAM,MAAAA,QAAQ,CAACC,IAAT,CAAc,CAAd;AACD,KAdM,CAgBP;AACA;AACA;;;AACA,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,QAAD;AAAU,MAAA,OAAO,EAAE,KAAK1D,KAAL,CAAWiB,OAA9B;AAAuC,MAAA,YAAY,EAAEsB,YAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAyCD;;AAhJiD","sourcesContent":["import React from 'react';\nimport { ToastContainer, toast, Flip } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport SingleTweet from './SingleTweet';\nimport { Button, Form, Message } from 'semantic-ui-react';\nimport UserPage from './UserPage';\n\nexport default class tweets extends React.Component {\n  constructor(props, context) {\n    super(props);\n    this.drizzleState = context.drizzle;\n    this.state = {\n      userAddress: '',\n      tweet: '',\n      hashT: '',\n      numTweets: 0,\n      dataKey: null,\n      loading: false,\n      errorMessage: '',\n    };\n  }\n  async componentDidMount() {\n    const { drizzle } = this.props;\n    const accounts = await this.props.drizzle.web3.eth.getAccounts();\n\n    // Initializes getNumTweets of store state\n    // getNumTweets is initially an empty object so this call sets it to however\n    // many tweets the current address passed to it has\n    drizzle.contracts.Twittor.methods.getNumTweets.cacheCall(accounts[0]);\n    this.setState({ userAddress: accounts[0] });\n  }\n\n  handleInputChange = event => {\n    this.setState({\n      tweet: event.target.value,\n      hashT: this.findHashTag(event.target.value),\n    });\n  };\n\n  handleSubmit = async event => {\n    event.preventDefault();\n\n    this.setState({ loading: true });\n    // console.log(this.state, 'WHAT IS BEING SUBMITTED');\n\n    toast.info('Processing tweet...', {\n      position: 'top-right',\n      autoClose: 10000,\n      transition: Flip,\n    });\n\n    try {\n      await this.props.drizzle.contracts.Twittor.methods\n        .addTweetStruct(this.state.tweet, this.state.hashT)\n        .send({ from: this.state.userAddress });\n    } catch (error) {\n      this.setState({ errorMessage: error.message });\n      toast.dismiss();\n    }\n\n    this.setState({ loading: false });\n  };\n\n  getTweet = async index => {\n    const result = await this.props.drizzle.contracts.Twittor.methods\n      .getEverythingTweetStruct(this.state.userAddress, index)\n      .call();\n\n    return result[0];\n  };\n\n  getNum = async index => {\n    const numTweets = await this.props.drizzle.contracts.Twittor.methods\n      .getNumTweets(this.state.userAddress)\n      .call();\n    this.setState({ numTweets });\n    this.forceUpdate();\n  };\n\n  findHashTag(str) {\n    const hashTIndex = str.indexOf('#');\n    let hashT = '';\n\n    if (hashTIndex !== -1) {\n      let endOfHashT = str.indexOf(' ', hashTIndex);\n      if (endOfHashT === -1) endOfHashT = str.length;\n      hashT = str.slice(hashTIndex, endOfHashT);\n    }\n    return hashT || '';\n  }\n\n  render() {\n    const { drizzleState } = this.props;\n    let length = 0;\n\n    const key = Object.keys(drizzleState.contracts.Twittor.getNumTweets)[0];\n    //if getNumTweets has been initialized then set length to equal getNumTweets\n    if (drizzleState.contracts.Twittor.getNumTweets[key]) {\n      length = drizzleState.contracts.Twittor.getNumTweets[key].value;\n    }\n\n    let mapArray = [];\n    if (length) {\n      mapArray.length = length;\n      mapArray.fill(1);\n    }\n\n    // console.log(\"props\", this.props)\n    // console.log(\"drizzleState>>>>\", this.props.drizzle.store.getState())\n    // console.log(\"contractInstance>>>>>\", this.contractInstance)\n    return (\n      <div className=\"App\">\n        <ToastContainer />\n        <UserPage drizzle={this.props.drizzle} drizzleState={drizzleState} />\n        {/* {<h1>{length} </h1>}\n        <div>\n          <button onClick={this.getTweet}>GET TWEET</button>\n          <button onClick={this.getNum}>GET Numtweets</button>\n\n          <h1>TWEETS</h1>\n          <Form onSubmit={this.handleSubmit} error={!!this.state.errorMessage}>\n            <input\n              key=\"tweet\"\n              name=\"tweet\"\n              value={this.state.tweet}\n              placeholder=\"tweet\"\n              onChange={this.handleInputChange}\n            />\n            <Message error header=\"Oops!\" content={this.state.errorMessage} />\n            <Button primary loading={this.state.loading}>\n              TWEET\n            </Button>\n          </Form>\n          <div className=\"allTweets\">\n            {mapArray\n              .map((tweet, idx) => {\n                return (\n                  <SingleTweet\n                    address={this.state.userAddress}\n                    index={idx}\n                    key={idx}\n                    drizzle={this.props.drizzle}\n                    drizzleState={drizzleState}\n                  />\n                );\n              })\n              .reverse()}\n          </div>\n        </div> */}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}