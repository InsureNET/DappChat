{"ast":null,"code":"var _jsxFileName = \"/Users/tristan/Documents/blockchain/Real Twittor/App/src/MyComponent.js\";\nimport React from 'react';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { ContractData, ContractForm } from 'drizzle-react-components';\nimport TweetForm from './TweetForm';\nimport SingleTweet from './SingleTweet';\nimport { Drizzle } from 'drizzle';\nimport options from './drizzleOptions';\nimport { DrizzleContext } from \"drizzle-react\"; // const drizzle = new Drizzle(options);\n\nexport default class tweets extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userAddress: ''\n    };\n  }\n\n  async componentDidMount() {\n    // console.log(\"drizzle \", drizzle)\n    const accounts = await this.props.drizzle.web3.eth.getAccounts();\n    this.setState({\n      userAddress: accounts[0]\n    });\n  }\n\n  render() {\n    let length = 0;\n    const getNumTweetsFirstKey = Object.keys(this.props.drizzleState.contracts.Twittor.getNumTweets)[1];\n\n    if (this.props.drizzleState.contracts.Twittor.getNumTweets[getNumTweetsFirstKey]) {\n      length = this.props.drizzleState.contracts.Twittor.getNumTweets[getNumTweetsFirstKey].value;\n    }\n\n    let mapArray = [];\n\n    if (length) {\n      mapArray.length = length;\n      mapArray.fill(1);\n    }\n\n    console.log(\"props\", this.props);\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(ToastContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"TWEETS\"), React.createElement(\"div\", {\n      className: \"allTweets\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, mapArray.map((tweet, idx) => {\n      return React.createElement(SingleTweet, {\n        address: this.state.userAddress,\n        index: idx,\n        key: idx,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      });\n    }).reverse()), React.createElement(\"div\", {\n      className: \"hide\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/tristan/Documents/blockchain/Real Twittor/App/src/MyComponent.js"],"names":["React","ToastContainer","ContractData","ContractForm","TweetForm","SingleTweet","Drizzle","options","DrizzleContext","tweets","Component","constructor","props","state","userAddress","componentDidMount","accounts","drizzle","web3","eth","getAccounts","setState","render","length","getNumTweetsFirstKey","Object","keys","drizzleState","contracts","Twittor","getNumTweets","value","mapArray","fill","console","log","map","tweet","idx","reverse"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,gBAA/B;AACA,OAAO,uCAAP;AACA,SAASC,YAAT,EAAuBC,YAAvB,QAA0C,0BAA1C;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,OAAT,QAAwB,SAAxB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,SAASC,cAAT,QAA+B,eAA/B,C,CAEA;;AACA,eAAe,MAAMC,MAAN,SAAqBT,KAAK,CAACU,SAA3B,CAAqC;AAClDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,WAAW,EAAE;AAAf,KAAb;AACD;;AACD,QAAMC,iBAAN,GAA0B;AACxB;AACA,UAAMC,QAAQ,GAAG,MAAM,KAAKJ,KAAL,CAAWK,OAAX,CAAmBC,IAAnB,CAAwBC,GAAxB,CAA4BC,WAA5B,EAAvB;AACA,SAAKC,QAAL,CAAc;AAAEP,MAAAA,WAAW,EAAEE,QAAQ,CAAC,CAAD;AAAvB,KAAd;AACD;;AAEDM,EAAAA,MAAM,GAAG;AACP,QAAIC,MAAM,GAAG,CAAb;AACA,UAAMC,oBAAoB,GAAGC,MAAM,CAACC,IAAP,CAC3B,KAAKd,KAAL,CAAWe,YAAX,CAAwBC,SAAxB,CAAkCC,OAAlC,CAA0CC,YADf,EAE3B,CAF2B,CAA7B;;AAGA,QAAI,KAAKlB,KAAL,CAAWe,YAAX,CAAwBC,SAAxB,CAAkCC,OAAlC,CAA0CC,YAA1C,CAAuDN,oBAAvD,CAAJ,EAAkF;AAChFD,MAAAA,MAAM,GAAG,KAAKX,KAAL,CAAWe,YAAX,CAAwBC,SAAxB,CAAkCC,OAAlC,CAA0CC,YAA1C,CAAuDN,oBAAvD,EAA6EO,KAAtF;AACD;;AACD,QAAIC,QAAQ,GAAG,EAAf;;AACA,QAAIT,MAAJ,EAAY;AACVS,MAAAA,QAAQ,CAACT,MAAT,GAAkBA,MAAlB;AACAS,MAAAA,QAAQ,CAACC,IAAT,CAAc,CAAd;AACD;;AAEDC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqB,KAAKvB,KAA1B;AAEA,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAGE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGoB,QAAQ,CACNI,GADF,CACM,CAACC,KAAD,EAAQC,GAAR,KAAgB;AACnB,aACE,oBAAC,WAAD;AACE,QAAA,OAAO,EAAE,KAAKzB,KAAL,CAAWC,WADtB;AAEE,QAAA,KAAK,EAAEwB,GAFT;AAGE,QAAA,GAAG,EAAEA,GAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAOD,KATF,EAUEC,OAVF,EADH,CAHF,EAgBE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhBF,CAHF,CADF;AAmDD;;AA9EiD","sourcesContent":["import React from 'react';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { ContractData, ContractForm} from 'drizzle-react-components';\nimport TweetForm from './TweetForm';\nimport SingleTweet from './SingleTweet';\nimport { Drizzle } from 'drizzle';\nimport options from './drizzleOptions';\nimport { DrizzleContext } from \"drizzle-react\";\n\n// const drizzle = new Drizzle(options);\nexport default class tweets extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { userAddress: '' };\n  }\n  async componentDidMount() {\n    // console.log(\"drizzle \", drizzle)\n    const accounts = await this.props.drizzle.web3.eth.getAccounts();\n    this.setState({ userAddress: accounts[0] });\n  }\n\n  render() {\n    let length = 0;\n    const getNumTweetsFirstKey = Object.keys(\n      this.props.drizzleState.contracts.Twittor.getNumTweets\n    )[1];\n    if (this.props.drizzleState.contracts.Twittor.getNumTweets[getNumTweetsFirstKey]) {\n      length = this.props.drizzleState.contracts.Twittor.getNumTweets[getNumTweetsFirstKey].value;\n    }\n    let mapArray = [];\n    if (length) {\n      mapArray.length = length;\n      mapArray.fill(1);\n    }\n\n    console.log(\"props\", this.props)\n\n    return (\n      <div className=\"App\">\n        <ToastContainer />\n\n        <div>\n          <h1>TWEETS</h1>\n          {/* <TweetForm contract=\"Twittor\" method=\"addTweetStruct\" store = {this.props.drizzle}/> */}\n          <div className=\"allTweets\">\n            {mapArray\n              .map((tweet, idx) => {\n                return (\n                  <SingleTweet\n                    address={this.state.userAddress}\n                    index={idx}\n                    key={idx}\n                  />\n                );\n              })\n              .reverse()}\n          </div>\n          <div className=\"hide\">\n            {/* {\n              <ContractData\n                contract=\"Twittor\"\n                method=\"getNumTweets\"\n                methodArgs={[this.state.userAddress]}\n              />\n            } */}\n          </div>\n\n          {/* (\n  <DrizzleContext.Consumer>\n    {drizzleContext => {\n      const { drizzle, drizzleState, initialized } = drizzleContext;\n  \n      if (!initialized) {\n        return \"Loading...\";\n      }\n\n      return (\n      <div>\n      <TweetForm drizzle = {drizzle} drizzleState = {drizzleState} />\n      </div>\n\n      );\n    }}\n  </DrizzleContext.Consumer>\n) */}\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}